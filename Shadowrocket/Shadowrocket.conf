# 2024.01.08
# 注意:去掉前面的注释符号 "#" 该行生效
# 配置参考：https://raw.githubusercontent.com/wlxuf/Shadowrocket/main/lazy.conf

# other设置补充说明
# 在「设置」里「 geolite2 数据库」填写下面链接
# https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country.mmdb
# https://raw.githubusercontent.com/Hackl0us/GeoIP2-CN/release/Country.mmdb

# 网络连通性检查使用的 url
# http://www.google.com/generate_204
# http://www.gstatic.com/generate_204
# http://www.qualcomm.cn/generate_204
# http://cp.cloudflare.com/generate_204
# http://captive.apple.com/generate_204

[General]
# 💡 通用设置
# 旁路系统开关 true/false
bypass-system = true

# ipv6 支持开关 true/false
ipv6 = false

# 首选 ipv6 支持开关 true/false
prefer-ipv6 = false

# 私有 ip 应答，如关闭域名解析会返回私有 ip，会认为该域名被劫持而强制使用代理开关 true/false
private-ip-answer = false

# 不开启时，REJECT 策略默认只有在配置模式下生效。开启后，可以令该策略在其他全局路由模式下都生效。
always-reject-url-rewrite = false

# ping 数据包自动回复开关 true/false
icmp-auto-reply = true

# 指定 url 进行代理连接检测
proxy-test-url = http://www.gstatic.com/generate_204

# 覆写 dns 服务器，支持 doq > doh3 > doh 混合使用，并发请求选取最优结果（强制 doh3 查询以 h3 开头，在 doh 链接后面加上 #no-h3 关闭）
dns-server = https://dns.alidns.com/dns-query, https://doh.pub/dns-query

# 当覆写的 dns 解析失败后回退到该 dns 服务器解析，多个 dns 可用 "," 分隔，"system" 会导致系统 dns 泄露，所以未启用
fallback-dns-server = 223.5.5.5, 119.29.29.29

# 直连的域名类规则使用系统 dns 进行查询开关 true/false，false 表示不启用
dns-direct-system = false

# 直连域名解析失败后使用代理开关 true/false，false 表示不启用
dns-direct-fallback-proxy = false

# 当 udp 流量匹配到规则里不支持的节点时重新选择回退行为，可选行为 direct 表示直连转发 udp 流量，reject 表示拒绝
udp-policy-not-supported-behaviour = REJECT

# 劫持 dns 服务器，获得假 ip 地址
hijack-dns = 8.8.8.8:53, 8.8.4.4:53

# 跳过代理或者 ip 段，不经过代理
skip-proxy = 10.0.0.0/8, 17.0.0.0/8, 100.64.0.0/10, 172.16.0.0/12, 192.168.0.0/16

# 指定 ip 段范围绕过 tun 旁路由
tun-excluded-routes = 10.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.0.0.0/24, 192.0.2.0/24, 192.88.99.0/24, 192.168.0.0/16, 198.18.0.0/15, 198.51.100.0/24, 203.0.113.0/24, 224.0.0.0/4, 255.255.255.255/32

# tun 包含路由。默认情况为默认路由，但由于 wifi 接口的路由较小，有些流量可能不会通过，使用此选项可以添加一个较小的路由表
tun-included-routes = 

# 配置的域名不会进行映射，返回真实的 ip
always-real-ip = *.lan, *.local, localhost, *.msftncsi.com, *.msftconnecttest.com, cable.auth.com, captive.apple.com, *.cmpassport.com, id6.me, open.e.189.cn, auth.wosms.cn, mdn.open.wo.cn, opencloud.wostore.cn, localhost.*.qq.com, localhost.*.weixin.qq.com

# 为 webrtc 返回一个假 ip，以防止真实 ip 地址泄露
stun-response-ip = 1.1.1.1
stun-response-ipv6 = ::1

# 表示当前配置包含另一个配置 conf 的内容，当前配置的优先级高于 shadowrocket-zh.conf。该选项是对配置建立包含关系，以满足同时使用多个配置的需求
include = 

# 配置更新 url 地址
update-url = https://raw.githubusercontent.com/aimetu/other/main/Shadowrocket/Shadowrocket.conf

[Host]
# 💡 对域名指定单独的 dns 服务器
# 域名使用对应的 ip 地址
# 域名指定 dns 服务器
openwrt.lan = server:system
blog.google = server:119.29.29.29
doh.pub = 1.12.12.12
dns.alidns.com = 223.5.5.5
dns.opendns.com = 208.67.222.222
talk.google.com = 108.177.125.188
mtalk.google.com = 108.177.125.188
dl.google.com = server:https://doh.pub/dns-query
dl.l.google.com = server:https://dns.alidns.com/dns-query
update.googleapis.com = server:quic://dns.alidns.com

[Proxy]
# 💡 本地节点
# 支持 http、https、socks5、socks5-tls、ss、ssr、vmess、vless、trojan、wireguard 等协议
# wireguard 代理服务器地址：engage.cloudflareclient.com，162.159.192/193/195/204.0/24, 188.114.96-99.0/24, 2606:4700:d0-d1::/48, 2606:4700:100::/48（udp 端口:2408，可选500、1701、4500）
HK-Warp Client = wireguard, engage.cloudflareclient.com, 2408, privateKey = nvWCeA9If1axAV3HnZ5oCsck6aPb/+I/+yhbPorfSFU=, publicKey = bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=, ip = 172.16.0.2,2606:4700:110:88a4:fa34:70a2:56b7:ead6, dns = 1.1.1.1,2606:4700:4700::1111, mtu = 1280, keepalive = 45, reserved = 17,176,6, udp = 1
TW-Warp Teams = wireguard, engage.nanocat.cloud, 2408, privateKey = gP9cP+V78zRVDy/TOyxuTtwyesCOP8549IWUXZg7XmA=, publicKey = bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=, ip = 172.16.0.2,2606:4700:110:8590:3f3:93bd:c8a4:a85d, dns = 1.1.1.1,2606:4700:4700::1111, mtu = 1280, keepalive = 45, reserved = 248,160,147, udp = 1
JP-Warp Team = wireguard, engage.nanocat.me, 2408, privateKey = QOmt5UE2jp5s2vqYMKmjd714tBC7eteELAFRCEinJG4=, publicKey = bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=, ip = 172.16.0.2,2606:4700:110:8f21:225d:3e30:7660:78cf, dns = 1.0.0.1,2606:4700:4700::1001, mtu = 1280, keepalive = 45, reserved = 80,73,10, udp = 1
IP-Warp Plus = wireguard, 188.114.97.229, 2506, privateKey = wEPBA9NACxZ+lfcTD0yFDrx83RNWseNw2O3yJYWeVmk=, publicKey = bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=, ip = 172.16.0.2,2606:4700:110:8f21:225d:3e30:7660:78cf, dns = 1.0.0.1,2606:4700:4700::1001, mtu = 1280, keepalive = 45, reserved = 173,82,247, udp = 1

[Proxy Group]
# 💡 策略组分流
# select:手动选择节点
# url-test:自动选择延迟最低节点
# fallback:节点挂掉时自动切换其他可用节点
# load-balance:不同规则的请求使用分组里的不同节点进行连接
# random:随机使用分组里的不同节点进行连接
# 表示正则式或关键词筛选，常用写法：
# 保留节点名称含有关键词 A 和 B 的节点：(?=.*(A))^(?=.*(B))^.*$
# 保留节点名称含有关键词 A 或 B 的节点：A|B
# 排除节点名称含有关键词 A 或 B 的节点：^((?!(A|B)).)*$
# 保留节点名称含有关键词 A 并排除含有关键词 B 的节点：(?=.*(A).)^((?!(B)).)*$
# 代理分组其他设置参数：
# interval：指定间隔多长时间后需要重新发起测试
# timeout：如果测试在超时前未完成，放弃测试
# tolerance：只有当新优胜者的分数高于旧优胜者的分数加上公差时，才会进行线路更换
# url：指定要测试的 url
🔰 Pick = select, ♻️ Auto, ⚖️ Load Balance, ⚠️ Fallback, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇨🇳 Chinese, DIRECT, PROXY, REJECT, url = http://www.gstatic.com/generate_204, interval = 600, timeout = 3, select = 0
♻️ Auto = url-test, policy-regex-filter = (?i), url = http://www.gstatic.com/generate_204, interval = 600, timeout = 3, select = 0
⚖️ Load Balance = Load-balance, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, url = http://www.gstatic.com/generate_204, interval = 600, timeout = 3, select = 0
⚠️ Fallback = fallback, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, url = http://www.gstatic.com/generate_204, interval = 600, timeout = 3, select = 0
🇭🇰 HongKong = url-test, policy-regex-filter = 🇭🇰|港|香港|hk|HK|Hong|🇭🇰 HongKong, url = http://www.gstatic.com/generate_204, interval = 600, timeout = 3, select = 0
🇹🇼 Taiwan = url-test, policy-regex-filter = 🇹🇼|台|台湾|台北|臺灣|tw|TW|Tai|🇹🇼 Taiwan, url = http://www.gstatic.com/generate_204, interval = 600, timeout = 3, select = 0
🇯🇵 Japan = url-test, policy-regex-filter = 🇯🇵|日|日本|川日|东京|大阪|泉日|埼玉|沪日|深日|jp|JP|🇯🇵 Japan, url = http://www.gstatic.com/generate_204, interval = 600, timeout = 3, select = 0
🇰🇷 Korea = url-test, policy-regex-filter = 🇰🇷|韩|韓|韩国|韓國|首尔|朝鲜|kr|KR|KOR|🇰🇷 Korea|South 🇰🇷 Korea|South🇰🇷 Korea, url = http://www.gstatic.com/generate_204, interval = 600, timeout = 3, select = 0
🇸🇬 Singapore = url-test, policy-regex-filter = 🇰🇷|韩|韓|韩国|韓國|首尔|朝鲜|kr|KR|KOR|🇰🇷 Korea|South 🇰🇷 Korea|South🇰🇷 Korea, url = http://www.gstatic.com/generate_204, interval = 600, timeout = 3, select = 0
🇺🇸 America = url-test, policy-regex-filter = 🇺🇸|美|美国|美國|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|us|US|United States|UnitedStates|🇺🇸 America, url = http://www.gstatic.com/generate_204, interval = 600, timeout = 3, select = 0
🇺🇳 Nations = url-test, policy-regex-filter = ^((?!🇨🇳|中国|大陆|国内|回国|cn|CN|🇨🇳 China|电信|移动|联通|腾讯|阿里|教育|校园|直连|🇭🇰|港|香港|hk|HK|Hong|🇭🇰 HongKong|🇹🇼|台|台湾|台北|臺灣|tw|TW|Tai|🇹🇼 Taiwan|🇯🇵|日|日本|川日|东京|大阪|泉日|埼玉|沪日|深日|jp|JP|🇯🇵 Japan|🇰🇷|韩|韓|韩国|韓國|首尔|朝鲜|kr|KR|KOR|🇰🇷 Korea|South 🇰🇷 Korea|South🇰🇷 Korea|🇸🇬|新|狮|新加坡|狮城|sg|SG|🇸🇬 Singapore|🇺🇸|美|美国|美國|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|us|US|United States|UnitedStates|🇺🇸 America).)*$, url = http://www.gstatic.com/generate_204, interval = 600, timeout = 3, select = 0
🇨🇳 Chinese = url-test, policy-regex-filter = 🇨🇳|中国|大陆|国内|回国|cn|CN|🇨🇳 China|电信|移动|联通|腾讯|阿里|教育|校园|直连, url = http://www.gstatic.com/generate_204, interval = 600, timeout = 3, select = 0
🕸️ Speedtest = select, 🇨🇳 China, 🔰 Pick, select = 0
🎵 TikTok = select, 🔰 Pick, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, select = 0
✉️ Telegram = select, 🔰 Pick, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, select = 0
🗣️ Discord = select, 🔰 Pick, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, select = 0
🎶 Spotify = select, 🔰 Pick, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, select = 0
📽️ Netflix = select, 🔰 Pick, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, select = 0
📼 Disney+ = select, 🔰 Pick, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, select = 0
📹 YouTube = select, 🔰 Pick, 🇭🇰 HongKong, 🇹🇼 Taiwan,🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, select = 0
🤖 OpenAI = select, 🔰 Pick, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, select = 0
🛒 Amazon = select, 🔰 Pick, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, select = 0
🎭 Facebook = select, 🔰 Pick, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, select = 0
📟 Google = select, 🔰 Pick, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, select = 0
🖥️ Microsoft = select, 🇨🇳 China, 🔰 Pick, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, s🇺🇳 Nations, elect = 0
🍎 Apple = select, 🇨🇳 China, 🔰 Pick, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, select = 0
🎬 Global Media = select, 🔰 Pick, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, select = 0
🌐 Global = select, 🔰 Pick, 🇭🇰 HongKong, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇰🇷 Korea, 🇸🇬 Singapore, 🇺🇸 America, 🇺🇳 Nations, select = 0
📺 China Media = select, 🇨🇳 China, 🔰 Pick, select = 0
🇨🇳 China = select, DIRECT, PROXY, 🔰 Pick, 🇨🇳 Chinese, ⛔ AdBlock, select = 0
🐟 Final = select, 🔰 Pick, 🇨🇳 China, ⛔ AdBlock, select = 0
⛔ AdBlock = select, REJECT, DIRECT, select = 0

[Rule]
# 💡 分流规则
# DOMAIN-SUFFIX：匹配请求域名的后缀。如 “DOMAIN-SUFFIX,example.com，DIRECT” 可以匹配到 “a.example.com、a.b.example.com”
# DOMAIN-KEYWORD：匹配请求域名的关键词。如 “DOMAIN-KEYWORD,exa，DIRECT” 可以匹配到 “a.example.com、a.b.example.com”
# DOMAIN：匹配请求的完整域名。如 “DOMAIN, www.example.com, DIRECT” 只能匹配到 “www.example.com”
# USER-AGENT：匹配用户代理字符串，支持使用通配符 “*”。如 “USER-AGENT, MicroMessenger*, DIRECT” 可以匹配到 “MicroMessenger Client”
# URL-REGEX：匹配 URL 正则式。如 “URL-REGEX, ^https?://.+/item.+, REJECT” 可以匹配到 “https://www.example.com/item/abc/123”
# IP-CIDR：匹配 IPv4 或 IPv6 地址。如 “IP-CIDR, 192.168.1.0/24, DIRECT, no-resolve” 可以匹配到IP段 “192.168.1.1～192.168.1.254”。规则加 no-resolve 时，IP 请求会匹配到这条规则，而域名请求不会用解析出来的 IP 去匹配这条规则。规则不加 no-resolve 时，则 IP 请求可匹配，域名解析后的 IP 也可匹配
# IP-ASN：匹配 IP 地址隶属的 ASN 编号。如 “IP-ASN,56040,DIRECT” 可以匹配到微信的相关 IP 请求
# RULE-SET：匹配规则集内容。规则集的组成部分需包含规则类型
# DOMAIN-SET：匹配域名集内容。域名集的组成部分不包含规则类型
# SCRIPT：匹配脚本名称
# DST-PORT：匹配目标主机名的端口号。如 “DST-PORT,443, DIRECT” 可以匹配到 443 目标端口
# GEOIP：匹配 IP 数据库。如 “GEOIP,CN, DIRECT” 可以匹配到归属地为 CN 的 IP 地址
# FINAL：兜底策略。如 “FINAL, PROXY” 表示当其他所有规则都匹配不到时才使用 FINAL 规则的策略
# AND：逻辑规则，与规则。如 “AND, (( DOMAIN, www.example.com ), (DST-PORT,123)), DIRECT” 可以匹配到 “www.example.com:123”
# NOT：逻辑规则，非规则。如 “NOT, (( DST-PORT, 123 )), DIRECT” 可以匹配到除了 “123” 端口的其他所有请求
# OR：逻辑规则，或规则。如 “OR,(( DST-PORT ,123 ),( DST-PORT, 456 )), DIRECT” 可以匹配到 “123” 或 “456” 端口的所有请求
# ----------
# 规则策略：
# PROXY：代理。通过首页正在使用的代理服务器转发流量
# DIRECT：直连。连接不经过任何代理服务器
# REJECT：拒绝。返回 HTTP 状态码 404，没有内容
# REJECT-DICT：拒绝。返回 HTTP 状态码 200，内容为空的 JSON 对象
# REJECT-ARRAY：拒绝。返回 HTTP 状态码 200，内容为空的 JSON 数组
# REJECT-200：拒绝。返回 HTTP 状态码 200，没有内容
# REJECT-IMG：拒绝。返回 HTTP 状态码 200，内容为 1 像素 GIF
# REJECT-TINYGIF：拒绝。返回 HTTP 状态码 200，内容为 1 像素 GIF
# REJECT-DROP：拒绝。丢弃 IP 包
# REJECT-NO-DROP：拒绝。返回 ICMP 端口不可达
# 除此之外，规则策略还可以选择「代理分组」、「订阅名称」、「分组」、「节点」
# ----------
# 规则匹配的优先级：
# 1.规则从上到下依次匹配
# 2.域名规则优先于 IP 规则
# ----------
# 关于屏蔽 443 端口的 UDP 流量的解释内容：HTTP3/QUIC 协议开始流行，但是国内 ISP 和国际出口的 UDP 优先级都很低，表现很差，屏蔽掉以强制回退 HTTP2/HTTP1.1。（如需启用该逻辑规则，请删除 AND 前面的注释符号 # ）
# AND, ((PROTOCOL,UDP), (DST-PORT,443)), REJECT-NO-DROP

# 完整域名匹配
DOMAIN, ad.cyapi.cn, ⛔ AdBlock
DOMAIN, ad.21cn.com, ⛔ AdBlock
DOMAIN, ad.k.21cn.com, ⛔ AdBlock
DOMAIN, admarket.21cn.com, ⛔ AdBlock
DOMAIN, adshows.21cn.com, ⛔ AdBlock
DOMAIN, mssdk-bu.bytedance.com, ⛔ AdBlock

# 域名后缀匹配
DOMAIN-SUFFIX, adx.appicad.net, ⛔ AdBlock
DOMAIN-SUFFIX, m1.ad.10010.com, ⛔ AdBlock

# 域名关键词匹配
DOMAIN-KEYWORD, stun, ⛔ AdBlock
DOMAIN-KEYWORD, pcdn, ⛔ AdBlock

# url-regex 匹配
URL-REGEX, ^http://google\.com, 📟 Google

# user-agent 匹配
USER-AGENT, pinterest*, 🌐 Global

# 本地 ipv4 匹配规则
IP-CIDR, 10.0.0.0/8, DIRECT
IP-CIDR, 100.64.0.0/10, DIRECT
IP-CIDR, 127.0.0.0/8, DIRECT
IP-CIDR, 172.16.0.0/12, DIRECT
IP-CIDR, 192.168.0.0/16, DIRECT
IP-CIDR, 224.0.0.0/24, DIRECT

# 本地 ipv6 匹配规则
IP-CIDR6, fe80::/10, DIRECT

# 远程分流规则
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Direct/Direct.list, 🇨🇳 China
#DOMAIN-SET, https://anti-ad.net/surge2.txt, ⛔ AdBlock
DOMAIN-SET, https://raw.githubusercontent.com/Cats-Team/AdRules/main/ad-domains.txt, ⛔ AdBlock
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Hijacking/Hijacking.list, ⛔ AdBlock
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Privacy/Privacy.list, ⛔ AdBlock
DOMAIN-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Privacy/Privacy_Domain.list, ⛔ AdBlock
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/AdvertisingLite/AdvertisingLite.list, ⛔ AdBlock
DOMAIN-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/AdvertisingLite/AdvertisingLite_Domain.list, ⛔ AdBlock
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/BlockHttpDNS/BlockHttpDNS.list, ⛔ AdBlock
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Speedtest/Speedtest.list, 🕸️ Speedtest
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/TikTok/TikTok.list, 🎵 TikTok
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Telegram/Telegram.list, ✉️ Telegram
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Discord/Discord.list, 🗣️ Discord
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Spotify/Spotify.list, 🎶 Spotify
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Netflix/Netflix.list, 📽️ Netflix
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Disney/Disney.list, 📼 Disney+
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/YouTube/YouTube.list, 📹 YouTube
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/OpenAI/OpenAI.list, 🤖 OpenAI
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Amazon/Amazon.list, 🛒 Amazon
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Facebook/Facebook.list, 🎭 Facebook
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Google/Google.list, 📟 Google
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Microsoft/Microsoft.list, 🖥️ Microsoft
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/SystemOTA/SystemOTA.list, ⛔ AdBlock
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Apple/Apple.list, 🍎 Apple
DOMAIN-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Apple/Apple_Domain.list, 🍎 Apple
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/GlobalMedia/GlobalMedia.list, 🎬 Global Media
DOMAIN-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/GlobalMedia/GlobalMedia_Domain.list, 🎬 Global Media
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Global/Global.list, 🌐 Global
DOMAIN-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Global/Global_Domain.list, 🌐 Global
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/ChinaMedia/ChinaMedia.list, 📺 China Media
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/China/China.list, 🇨🇳 China
DOMAIN-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/China/China_Domain.list, 🇨🇳 China
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/ChinaIPs/ChinaIPs.list, 🇨🇳 China
RULE-SET, https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/ChinaIPsBGP/ChinaIPsBGP.list, 🇨🇳 China

# geoip 数据库地区分流规则
GEOIP, CN, 🇨🇳 China

# 不在规则中的请求，走 final 指定策略
FINAL, 🐟 Final

[URL Rewrite]
# 💡 重写
^https?:\/\/(www.)?(g|google)\.cn https://www.google.com 302
^https?:\/\/(ditu|maps).google\.cn https://maps.google.com 302
(?<=_region=)CN(?=&) KR 307
(?<=&mcc_mnc=)4 2 307
^(https?:\/\/(tnc|dm)[\w-]+\.\w+\.com\/.+)(\?)(.+) $1$3 302
(^https?:\/\/*\.\w{4}okv.com\/.+&.+)(\d{2}\.3\.\d)(.+) $118.0$3 302

[MITM]
# 💡 https 解密,需安装证书并信任
# 需解密的域名，可以使用通配符 * 或 ？ 来表示域名，以 - 开头来排除域名
hostname = g.cn, *.google.cn, *.tiktokv.com, *.byteoversea.com, *.tik-tokapi.com

[Script]
# 💡 脚本
📅 Calendar = type = cron, script-path = https://raw.githubusercontent.com/TributePaulWalker/Profiles/main/JavaScript/Surge/wnCalendar.js, cronexpr = "0 7 * * *", script-update-interval = 24, enable = true
🌕 Nasa = type = cron, script-path = https://raw.githubusercontent.com/evilbutcher/QuantumultX/master/check_in/nasa/nasapic.js, cronexpr = "0 7 * * *", script-update-interval = 24, enable = true
🌐 iDaily = type = cron, script-path = https://raw.githubusercontent.com/evilbutcher/QuantumultX/master/check_in/idaily/idaily.js, cronexpr = "0 7 * * *", script-update-interval = 24, enable = true
📖 One = type = cron, script-path = https://raw.githubusercontent.com/githubdulong/Script/master/One.js, cronexpr = "0 9 * * *",script-update-interval = 24, enable = true
💰 Exchange = type = cron, script-path = https://raw.githubusercontent.com/Peng-YM/QuanX/master/Tasks/exchange.js, cronexpr = "0 10 * * *", script-update-interval = 24, enable = true
🎫 Lottery = type = cron, script-path = https://raw.githubusercontent.com/evilbutcher/QuantumultX/master/check_in/ssq/ssq.js, cronexpr = "30 21 * * *", script-update-interval = 24, enable = true
