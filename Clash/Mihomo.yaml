# 使用 yaml 格式，大小写敏感，使用缩进表示层级关系，缩进不允许使用 tab, 只允许空格，缩进的空格数不重要，只要相同层级的元素左对齐即可
# 对象键值对使用冒号结构表示 key: value, 冒号后面要加一个空格，使用缩进表示层级关系，示例：enable: true
# ipv6 地址应当使用 [] 来框选，示例：[aaaa::a8aa:ff:fe09:57d9]:853 带端口的 ipv6 地址
# 使用通配符时，应当使用引号 ''或 " " 将内容包裹起来，以免过度匹配
# mihomo 配置详解：https://wiki.metacubex.one
# mihomo 配置示例：https://github.com/MetaCubeX/mihomo/blob/Alpha/docs/config.yaml

# 第三方 web 管理页面：
# https://board.zash.run.place/
# http://clash.razord.top/
# http://yacd.haishan.me/
# https://yacd.metacubex.one/
# https://d.metacubex.one/
# https://metacubex.github.io/metacubexd/

# 2025.03.30
# 注释：在 yaml 格式的文件中，以 "#" 作为注释开头，行尾为结尾，"#" 必须在行头或者必须在前方有空格，否则不视为注释

# other 设置补充说明
# 自定义 geoip & ipasn 数据库
# https://github.com/Hackl0us/GeoIP2-CN
# https://github.com/Loyalsoldier/geoip
# https://github.com/P3TERX/GeoLite.mmdb
# https://github.com/MetaCubeX/meta-rules-dat

# 网络连通性检查使用的 url
# http://www.google.com/generate_204
# http://www.gstatic.com/generate_204
# https://cp.cloudflare.com/generate_204
# http://connectivitycheck.gstatic.com/generate_204
# http://www.msftncsi.com/ncsi.txt
# http://www.msftconnecttest.com/connecttest.txt
# http://detectportal.firefox.com/success.txt
# http://captive.apple.com/hotspot-detect.html

#💡 通用设置
mode: rule # 运行模式:rule 规则、global 全局、direct 直连、script 脚本

log-level: info  # 日志模式:silent 静默、info 信息、warning 警告、error 错误、debug 调试

ipv6: true # ipv6 支持，关闭将阻断所有 ipv6 链接和屏蔽 dns 请求 aaaa 记录

port: 7891 # 本地 http(s) 代理端口
socks-port: 7892 # 本地 socks4/4a/5 代理端口
mixed-port: 7890 # 混合端口, 同时支持 http(s) 和 socks5 协议. 可以使用任何支持 http 或 socks 代理的程序连接到这个端口
redir-port: 7895 # 重定向端口，用于透明代理，仅能代理 tcp 流量（用于 Linux 和 MacOS ）
tproxy-port: 7896  # 透明代理端口，支持 TUN 模式，可代理 tcp 与 udp 流量（用于 Linux ）

allow-lan: true # 允许局域网设备连接代理
bind-address: "*" # 仅适用 allow-lan 为 true 的情况，仅允许某个 ip 访问：支持三种参数："*" 绑定所有 ip 地址，192.168.188.188/[aaaa::a8aa:ff:fe09:57d8] 绑定一个的 ipv4/ipv6 地址
lan-allowed-ips: # 允许连接的 ipv4/ipv6 地址段，仅作用于 allow-lan 为 true, 默认值为 0.0.0.0/0 和 ::/0
  - "0.0.0.0/0"
  - "::/0"
lan-disallowed-ips: # 禁止连接的 ip 地址段, 黑名单优先级高于白名单, 默认值为空
  - "192.168.1.0/24"
  - "2409:8a28:7125:35a0::/64"
authentication:  # 本地 http(s)/socks 代理验证用户密码
  - "admin:password"
skip-auth-prefixes: # 跳过验证的 ip4/ipv6 段
  - "127.0.0.1/8"
  - "::1/128"
  - "10.10.10.0/24"
  - "2409:8a28:7125:eb65::/64"

#interface-name: en0 # 指定流量出站接口网卡

routing-mark: 6666 # 为 linux 下的出站连接提供默认流量标记

unified-delay: true # 开启统一延迟时，会计算 rtt (往返时延)，以消除连接握手等带来的不同类型节点的延迟差异
tcp-concurrent: true  # tcp 并发连接所有 ip, 将使用最快握手的 tcp

disable-keep-alive: true # 禁用 tcp keep alive，允许链接一直存在
keep-alive-idle: 600 # tcp keep alive 空闲时间 (单位: 秒)
keep-alive-interval: 15 # tcp keep alive 间隔时间 (单位: 秒)

find-process-mode: strict # 查找进程模式有3个值：always 开启，强制匹配所有进程。strict 默认，由设备判断是否开启。off 不匹配进程，推荐在路由器上使用此模式。

global-ua: clash.meta # 自定义外部资源下载时使用的的 ua，默认为 clash.meta 可选 Chrome/135.0、Firefox/135.0 或其它
global-client-fingerprint: chrome # 全局客户端 TLS 指纹，优先低于 proxy 内的 client-fingerprint, 支持协议有 VLESS,Vmess 和 trojan，可选 random(随机)/none/chrome/firefox/safari/edge
etag-support: true # 外部资源下载的 etag 支持

external-controller: 0.0.0.0:9090 # 外部控制器 api 监听地址，允许使用 RESTful API 控制您的 mihomo 内核，你可以将 127.0.0.1 修改为 0.0.0.0 来监听所有 ip
external-controller-tls: 0.0.0.0:9443 # 外部控制器 https-api 监听地址，需要配置 tls 部分证书和其私钥配置，使用 tls 也必须填写 external-controller
secret: password # http(s)-api、api 监听地址外部控制器访问密钥
#tls:
#  certificate: string # 证书 PEM 格式，或者 证书的路径
#  private-key: string # 证书对应的私钥 PEM 格式，或者私钥路径
#  custom-certifactes:
#    - |
#      -----BEGIN CERTIFICATE-----
#      format/pem...
#      -----END CERTIFICATE-----
external-controller-cors: # 外部控制器 RESTful API CORS 标头配置
  allow-origins:
    - "*"
  allow-private-network: true
#external-controller-unix: mihomo.sock # 通过 Unix 套接字访问 API 监听地址，端点不会验证机密。如果启用，请确保安全措施到位，测试方法： curl -v --unix-socket "mihomo.sock" http://localhost/
#external-controller-pipe: \\.\pipe\mihomo # Windows 命名管道 API 监听地址，访问 API 接口不会验证密钥，若开启，请确保您的安全
#external-doh-server: https://dns.alidns.com/dns-query # 在 RESTful API 端口上开启 DOH 服务器

external-ui: ./ui # 配置外部控制器目录，存放配置文件的相对路径，或存放网页静态资源的绝对路径，部署地址：http://{external-controller}/ui
external-ui-name: zashboard # 自定义外部 ui 名
# 自定义外部用户界面下载地址
external-ui-url: "https://github.com/Zephyruso/zashboard/releases/latest/download/dist.zip"
# metacubexd："https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"
# zashboard（大内存）："https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"
# zashboard（小内存）："https://github.com/Zephyruso/zashboard/releases/latest/download/dist-cdn-fonts.zip"

geodata-mode: true # geoip 数据模式，true为 dat，false为 mmdb
geodata-loader: standard # geo 文件加载模式：standard：标准加载器，memconservative：专为内存受限(小内存)设备优化的加载器(默认值)
geo-auto-update: true # 自动更新 geo
geo-update-interval: 72 # 更新间隔，单位为小时
geox-url: # 自定 geo 下载地址
  geoip: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip.dat"
  geosite: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/country.mmdb"
  asn: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb"
geosite-matcher: succinct # geosite 匹配模式：succinct：默认 rule-set 分流模式，mph：V2Ray 或 Xray 混合模式  

experimental: # 禁用 quic 协议中的 gso(通用分段卸载)/ecn(显式拥塞通知)/ip4p(地址转换) 功能, 这可能会导致 linux 上的性能降低
  quic-go-disable-gso: false
  quic-go-disable-ecn: false
  dialer-ip4p-convert: false

profile:  # profile 为扩展配置, 仅作为缓存项使用(文件位置 ./cache.db)
  store-selected: true # 储存 api 对策略组的选择，以供下次启动时使用
  store-fake-ip: true # 储存 fakeip 映射表，域名再次发生连接时，使用原有映射地址

#💡 同步时间中心 ntp 服务
ntp:
  enable: true # 是否启用 ntp 服务
  write-to-system: true # 是否同步至系统时间，需要 root、管理员模式运行
  server: ntp.aliyun.com # ntp 服务地址，默认 ntp.aliyun.com
  port: 123 # ntp 服务端口，默认 123
  interval: 600 # 同步时间间隔，单位（分），默认同步间隔为 60 分

#💡 虚拟网卡 tun 模式配置
tun:
  enable: false # tun 模式开关
  stack: gvisor # 网络栈类型 system > gvisor > mixed，默认 gvisor，system 栈占用低，需防火墙放行内核，mixed 混合堆栈 tcp 使用 system，udp 使用 gvisor 需防火墙放行内核
  auto-detect-interface: true # 自动选择流量出口接口，多出口网卡同时连接的设备建议手动指定出口网卡
  auto-route: true # 自动设置全局路由,可以自动将全局流量路由进入 tun 网卡
  auto-redir: true # 自动配置 iptables/nftables 以重定向 TCP 连接，需要 auto-route 已启用
  device: utun # 指定 tun 网卡名称，macos 设备只能使用 utun 开头的网卡名
  strict_route: true # 将所有连接路由到 tun 来防止泄漏，但你的设备将无法其他设备被访问
  mtu: 9000 # 最大传输单元, 可用值为 1-65534, 会影响极限状态下的速率,一般用户默认即可
  gso: true # 启用通用分段卸载，仅支持 Linux
  gso-max-size: 65536 # 通用分段卸载包的最大大小
  udp-timeout: 300 # UDP NAT 过期时间，以秒为单位
  iproute2-table-index: 2022 # 生成的 iproute2 路由表索引，默认使用 2022
  iproute2-rule-index: 9000 # 生成的 iproute2 规则起始索引，默认使用 9000
  endpoint-independent_nat: false # 启用独立于端点的 NAT，性能可能会略有下降，在不需要的时候不建议开启
  dns-hijack: # dns 劫持仅支持 tcp/udp
    - any:53
    - tcp://any:53
  route-address: # 启用 auto-route 时使用自定义路由而不是默认路由
    - 0.0.0.0/1
    - 128.0.0.0/1
    - "::/1"
    - "8000::/1"
  #route-address-set: # 将指定 IP CIDR 添加到防火墙，不匹配的流量将绕过路由 仅支持 Linux，且需要 nftables 以及auto-route 和 auto-redirect 已启用
    #- ruleset-1
  #route-exclude-address-set: # 将指定 IP CIDR 添加到防火墙，匹配的流量将绕过路由 仅支持 Linux，且需要 nftables 以及auto-route 和 auto-redirect 已启用
    #- ruleset-2
  #route-exclude-address: # 启用 auto-route 时排除自定义网段
  #- 192.168.0.0/16
  #- fc00::/7
  #include-interface: # 限制被路由的接口，默认不限制，与 exclude-interface 冲突，不可一起配置
  #- eth0
  #exclude-interface: # 排除路由的接口，与 include-interface 冲突，不可一起配置
  #- eth1
  #include-uid: # 包含的用户使用 tun，未被配置的用户不会使用，默认不限制
  #- 0
  #include-uid-range: # 包含的用户范围使用 tun，未被配置的用户不会使用
  #- 1000-99999
  #exclude-uid: # 排除用户使用 tun
  #- 1000
  #exclude-uid-range: # 排除范围用户使用 tun
  #- 1000-99999
  #include-android-user: # 包含的 android 用户使用 tun，未被配置的用户不会使用
  #- 0
  #- 10
  #include-package: # 包含的 android 应用包名使用 tun，未配置的应用包不会使用
  #- com.android.chrome
  #exclude-package: # 排除 android 应用包名，使其避免使用 tun
  #- com.adguard.android

#💡 域名解析 dns 服务器配置
dns:
  enable: true  # dns 开关关闭将使用系统 dns
  cache-algorithm: arc # lru: 最近最少使用算法，arc：自适应缓存替换算法
  ipv6: true # 是否解析 ipv6, 如为 false, 则回应 AAAA 的空解析
  ipv6-timeout: 300 # 内部双栈并发时，向上游查询时的等待时间，默认 100ms (单位：ms)
  prefer-h3: true # doh 优先使用 http/3
  respect-rules: true # dns 遵守路由规则，需配置 proxy-server-nameserver
  use-hosts: true # 是否回应配置中的 hosts
  use-system-hosts: true # 是否查询系统中的 hosts
  listen: 0.0.0.0:53 # dns 服务监听，仅支持 udp
  enhanced-mode: fake-ip # dns 增强模式  
  fake-ip-range: 198.18.0.1/16 # fake-ip 解析地址池
  fake-ip-filter-mode: blacklist # 匹配模式默认为 blacklist（ whitelist ），如果匹配成功不返回 (返回)  fake-ip
  fake-ip-filter: # fakeip 过滤，以下地址不会下发 fakeip 映射用于连接
    - "*.lan"
    - "*.local"
    - "localhost"
    - "WORKGROUP"
    - "*.msftncsi.com"
    - "*.msftconnecttest.com"
    - "cable.auth.com"
    - "captive.apple.com"
    - "*.cmpassport.com"
    - "id6.me"
    - "open.e.189.cn"
    - "mob.com"
    - "hmrz.wo.cn"
    - "auth.wosms.cn"
    - "mdn.open.wo.cn"
    - "id.mail.wo.cn"
    - "opencloud.wostore.cn"
    - "nishub1.10010.com"
    - "enrichgw.10010.com"
    - "localhost.*.qq.com"
    - "localhost.*.weixin.qq.com"
    #- rule-set:🇨🇳 China # rule-providers 中 behavior 必须为 domain/classical 域名类规则
    #- geosite:cn # geosite 中名为 cn 的分类（ 需要自行保证该分类存在 ）
    
  default-nameserver: # 默认 dns 服务器, 必须为 ip 可为（dot、doh）加密 dns
    - "223.5.5.5"
    - "119.29.29.29"
    #- "tls://1.1.1.1"
    #- "https://208.67.222.222/dns-query"
    
  nameserver: # 默认加密 dns 服务器（ 添加指定参数：#eth0：指定出口网卡，#proxy：指定代理或策略组 &h3=true：强制 doh 启用 http/3 查询  ）
    - "https://dns.alidns.com/dns-query"
    - "https://doh.pub/dns-query"
    #- "quic://dns.alidns.com"

  proxy-server-nameserver: # 代理节点域名 dns 服务器，仅用于解析代理节点的域名，不填则遵循 nameserver-policy、nameserver和fallback的配置
    - "tls://1.1.1.1"
    - "tls://208.67.222.222"
    #- "https://1.0.0.1/dns-query"
    #- "https://208.67.220.220/dns-query"
    
  fallback: # 后备 dns 服务器，一般情况下使用境外 dns, 保证结果可信
     - "https://cloudflare-dns.com/dns-query"
     - "https://dns.opendns.com/dns-query"
    #- "quic://dns.adguard-dns.com"

  fallback-filter: # 后备域名解析服务器筛选，满足条件的将使用 fallback 结果或只使用 fallback 解析
    geoip: true # 是否启用 geoip 判断
    geoip-code: CN # geoip 匹配区域筛选，查询不是 cn 时使用 fallback 返回结果
    geosite: # 匹配到 geosite 的域名，将只使用 fallback 解析，不去使用 nameserver
      - gfw
    ipcidr: # 这些网段的结果会被视为污染，nameserver 解析出这些结果时将会采用 fallback 的解析结果
      - 240.0.0.0/4
    domain: # 这些域名被视为已污染，匹配到这些域名，会直接使用 fallback 解析，不去使用 nameserver  
      - "+.google.com"
      - "+.facebook.com"
      - "+.youtube.com"
    
  direct-nameserver-follow-policy: true # 是否遵循 nameserver-policy，仅当 direct-nameserver 不为空时生效    
  direct-nameserver: # 用于 direct 出口域名解析的 DNS 服务器，如果不填则遵循 nameserver-policy、nameserver 和 fallback 的配置
    - https://cloudflare-dns.com/dns-query
    - https://dns.opendns.com/dns-query
    
  nameserver-policy: # 指定域名查询的解析服务器，可指定 " geosite & rule-set " dns 解析
    "blog.google": 208.67.222.222
    "dl.google.com": https://dns.opendns.com/dns-query
    "dl.l.google.com": https://dns.opendns.com/dns-query
    "update.googleapis.com": quic://dns.alidns.com
    "rule-set:📟 Google,📹 YouTube": https://dns.google/dns-query
    "geosite:cn,private": 
      - https://dns.alidns.com/dns-query
      - https://doh.pub/dns-query
    "geosite:category-scholar-!cn,geolocation-!cn":
      - https://dns.opendns.com/dns-query
      - https://cloudflare-dns.com/dns-query
    
#💡 本地域名映射，类似于/etc/hosts, 仅支持配置单个 ip
hosts:
  "*.mihomo.dev": 127.0.0.1
  "*.dev": 127.0.0.1
  "alpha.mihomo.dev": "::1"
  "talk.google.com": 108.177.125.188
  "mtalk.google.com": 108.177.125.188
  "my.router": router.local # 只允许配置一个别名
  "*.home.arpa": lan # lan 为特别字段，将加入本地所有网卡的地址

#💡 内置 sniffer 域名嗅探器，通过读取握手包内的域名字段，将 ip 还原成域名，有效解决 mapping 机制的短板
sniffer:
  enable: true # 配置 sniffer 开关
  parse-pure-ip: true  # 对所有未获取到域名的流量进行强制嗅探
  force-dns-mapping: true # 对 redir-host 类型识别的流量进行强制嗅探
  override-destination: true # 是否使用嗅探结果作为实际访问，默认为 true  
  sniff: # 需要嗅探的协议类型  
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
      override-destination: true
    QUIC:
      ports: [443, 8443]
  skip-domain: # 需要跳过嗅探的域名。主要解决部分站点 sni 字段非域名，导致嗅探结果异常的问题，如米家设备 
    - "Mijia Cloud"
    - "dlg.io.mi.com"
    - "+.apple.com"
  force-domain: # 需要强制嗅探的域名（默认情况下只对 IP 进行嗅探） 
    - "google.com"
  skip-src-address: # 跳过嗅探的来源 IP 段列表
    - 192.168.0.3/32
  skip-dst-address: # 跳过嗅探的目标 IP 段列表
    - 192.168.0.3/32
    
#💡 流量入站配置,可以作为服务器
listeners:
  - name: socks-lan
    type: socks # socks代理
    port: 10808 # 支持使用ports格式，例如200,302 or 200,204,401-429,501-503
    listen: 0.0.0.0
    udp: true
    users:
      - username: admin
        password: password
    rule: rules # 默认使用 rules，如果未找到 sub-rule 则直接使用 rules
    #proxy: 🌐 Global  # 如果不为空则直接将该入站流量交由指定 proxy 处理 (当 proxy 不为空时，这里的 proxy 名称必须合法，否则会出错)
    
  - name: http-lan
    type: http # http(s)代理
    port: 10809
    listen: 0.0.0.0
    udp: true
    users:
      - username: admin
        password: password
    rule: rules
    #proxy: 🌐 Global

  - name: mixed-lan
    type: mixed # http(s) 和socks代理混合
    port: 10810
    listen: 0.0.0.0
    udp: true
    users:
      - username: admin
        password: password
    rule: rules
    #proxy: 🌐 Global

  - name: tproxy-lan
    type: tproxy
    port: 10811
    listen: 0.0.0.0
    udp: true
    rule: rules
    #proxy: 🌐 Global
    
  - name: shadowsocks-lan
    type: shadowsocks
    port: 10812
    listen: 0.0.0.0
    password: wEPBA9NACxZ+lfcTD0yFDrx83RNWseNw2O3yJYWeVmk=
    cipher: aes-256-gcm
    rule: rules
    #proxy: 🌐 Global
    
  - name: vmess-lan
    type: vmess
    port: 10813
    listen: 0.0.0.0
    rule: rules
    #proxy: 🌐 Global
    users:
      - username: admin
        uuid: 08c4ff67-599a-4d28-90a5-9d85fecd0e5b
        alterId: 0
    #ws-path: "/" # 如果不为空则开启websocket传输层
    #certificate: ./server.crt # 下面两项如果填写则开启tls（需要同时填写）
    #private-key: ./server.key

  - name: vless-lan
    type: vless
    port: 10814
    listen: 0.0.0.0
    rule: rules
    #proxy: 🌐 Global
    users:
      - username: admin
        uuid: 08c4ff67-599a-4d28-90a5-9d85fecd0e5b
        flow: xtls-rprx-vision
    #ws-path: "/" # 如果不为空则开启websocket传输层
    #grpc-service-name: "GunService" # 如果不为空则开启 grpc 传输层
    #certificate: ./server.crt # 下面两项如果填写则开启tls（需要同时填写）
    #private-key: ./server.key

  - name: trojan-lan
    type: trojan
    port: 10815
    listen: 0.0.0.0
    rule: rules
    #proxy: 🌐 Global
    users:
      - username: admin
        password: 08c4ff67-599a-4d28-90a5-9d85fecd0e5b
    #ws-path: "/" # 如果不为空则开启websocket传输层
    #grpc-service-name: "GunService" # 如果不为空则开启 grpc 传输层
    #certificate: ./server.crt # 下面两项如果填写则开启tls（需要同时填写）
    #private-key: ./server.key
    
#💡 隧道模式，代理转发到目标服务器（示例：address 经过 proxy 访问 target）
tunnels:
  - tcp/udp,127.0.0.1:6553,1.1.1.1:53,🌐 Global # 单行简约配置，顺序分别对应多行的 network/address/target/proxy
  - network: [tcp, udp] # 需要监听的网络类型，可为 tcp/udp
    address: 127.0.0.1:7777 # 本地监听地址
    target: engage.cloudflareclient.com:2408 # 转发的目标地址
    proxy: 🌐 Global # 代理
  
#💡 本地代理服务器
# wireguard 代理服务器地址：engage.cloudflareclient.com，162.159.192-195.0/24，（udp 端口:2408，备选 500、1701、4500）
proxies: 
  - name: 🌤️ Warp # 代理名称,书写时请确保不会与其他代理节点重名
    type: wireguard # 代理类型,此处为 wireguard
    private-key: nvWCeA9If1axAV3HnZ5oCsck6aPb/+I/+yhbPorfSFU= # base64 编码的 wireguard 客户端私钥
    ip: 172.16.0.2 # 本机在 wireguard 网络中使用的 ipv4 地址
    ipv6: 2606:4700:110:88a4:fa34:70a2:56b7:ead6 # 可选字段，本机在 wireguard 网络中使用的 ipv6 地址
    peers: # 如果使用多个 peer，每一个 peer 的 allowed-ips 需要做区分；此时顶层段落的 server, port, ip, ipv6, public-key, pre-shared-key, reserved 等字段均会被忽略，不过private-key仍然在顶层指定
     - server: engage.cloudflareclient.com # wireguard 服务器地址
       port: 2408 # wireguard 服务端端口
       public-key: bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=
       #pre-shared-key: 31aIhAPwktDGpH4JDhA8GNvjFXEf/a6+UaQRyOAiyfM= # 可选字段，预共享密钥
       allowed_ips: ["0.0.0.0/0","::/0"] # 可选字段，限制客户端的哪些 ip 段的流量由服务端进行转发。一般情况下可填 ['0.0.0.0/0']
       reserved: [17,176,6] # 可选字段，Wireguard 协议保留字段的值，部分 warp 节点需要使用
    mtu: 1280 # 可选字段，设置 mtu 值
    udp: true # 可选字段，是否启用 udp 支持
    persistent-keepalive: 45 # 可选字段，数据包间隔持久保活时长
    remote-dns-resolve: true # 可选字段，是否强制 dns 远程解析，默认值为 false
    dns: [1.1.1.1,2606:4700:4700::1111] # 可选字段，当 remote-dns-resolve 为 true 时生效，指定远程解析使用的 dns 服务器
    #dialer-proxy: 🇭🇰 HongKong # 指定 proxy/proxy-group 建立网络连接,用于 wireguard 配置链式代理

  - name: 🌤️ Warp Zero
    type: wireguard
    private-key: CJ+a9D/TltH3gxM3hg2jdyeyctYkjw6Tym4hje+H9EQ=
    ip: 172.16.0.2
    ipv6: 2606:4700:110:82f0:bb8c:8f76:fdf0:e565
    peers:
     - server: 162.159.193.1
       port: 2408
       public-key: bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=
       #pre-shared-key: 31aIhAPwktDGpH4JDhA8GNvjFXEf/a6+UaQRyOAiyfM=
       allowed_ips: ["0.0.0.0/0","::/0"]
       reserved: [197,215,83]
    mtu: 1280
    udp: true
    persistent-keepalive: 45
    remote-dns-resolve: true
    dns: [1.1.1.1,2606:4700:4700::1111]
    #dialer-proxy: 🇹🇼 Taiwan

  - name: 🌤️ Warp Team
    type: wireguard
    private-key: QOmt5UE2jp5s2vqYMKmjd714tBC7eteELAFRCEinJG4=
    ip: 172.16.0.2
    ipv6: 2606:4700:110:8f21:225d:3e30:7660:78cf
    peers:
     - server: 162.159.194.1
       port: 2408
       public-key: bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=
       #pre-shared-key: 31aIhAPwktDGpH4JDhA8GNvjFXEf/a6+UaQRyOAiyfM=
       allowed_ips: ["0.0.0.0/0","::/0"]
       reserved: [80,73,10]
    mtu: 1280
    udp: true
    persistent-keepalive: 45
    remote-dns-resolve: true
    dns: [1.1.1.1,2606:4700:4700::1111]
    #dialer-proxy: 🇯🇵 Japan
    
# 优选 IP：https://blog.aizrf.com/p/cf/, https://stock.hostmonit.com/CloudFlareYes
  - name: 🌤️ Warp Workers
    type: vless
    server: jinxiutu.pages.dev
    port: 443
    uuid: 38966bb4-c2a2-4010-8663-25db09980b2b
    udp: true
    tls: true
    network: ws
    servername: jinxiutu.pages.dev
    skip-cert-verify: true
    ws-opts:
      path: "/?ed=2560"
      headers:
        Host: jinxiutu.pages.dev
      v2ray-http-upgrade: false

  - name: 🌤️ Warp Pages
    type: vless
    server: jinqiantu.pages.dev
    port: 443
    uuid: 58935f45-89c2-4b82-a77c-72eee801da09
    udp: true
    tls: true
    network: ws
    servername: jinqiantu.pages.dev
    skip-cert-verify: true
    ws-opts:
      path: "/?ed=2560"
      headers:
        Host: jinqiantu.pages.dev
      v2ray-http-upgrade: false

#💡 远程代理服务器订阅链接，可订阅或设置多个代理服务器订阅
# filter: (?i)港|台|日|韩|新|狮|美 # 筛选满足关键词或正则表达式的节点
# exclude-filter: (?i)(港|台|日|韩|新|狮|美) # 排除满足关键词或正则表达式的节点
# exclude-type: " vmess|hysteria2 " # 不支持正则表达式，通过 | 分割，根据节点 " type " 类型（ss、ssr、socks5、http、snell、vmess、vless、trojan、hysteria、hysteria2、wireguard、tuic）排除排除，注意：proxy-providers 与 proxy-groups 写法不同
proxy-providers:
  Subscribe: # 远程代理服务器引用名称
    type: http # 代理服务器类型为（http：订阅，file：筛选）
    path: ./proxy/Subscribe.yaml # 存储路径
    url: https://sub.store/download/collection/node # 订阅添加后缀 &flag=meta&types=all、＆flag=[ua]&types=[hysteria2] 根据不同 ua|type（节点类型）获取不同的配置
    interval: 86400 # 示例：自动更新时长单位：秒
    proxy: 🐟 Final # 经过指定代理进行下载/更新
    size-limit: 0 # 限制下载文件的最大大小，默认为 0 即不限制文件大小，单位为字节 (b)
    #filter: "(?i)港|台|日|韩|新|狮|美" # 示例：筛选满足关键词或正则表达式的节点
    exclude-filter: "(?i)(订阅|流量|剩余|套餐|到期|过滤|重置|距离|过期|线路|官网|网站|网址|地址|备用|客服|群|邀请|返利|循环|已用|联系|邮箱)" # 示例：排除满足关键词或正则表达式的节点
    #exclude-type: "ss|ssr|http|vmess|vless|trojan|socks5|snell|hysteria|hysteria2|wireguard|tuic" # 示例：根据节点 "type" 类型排除
    header: # 自定义 http 请求头
      User-Agent:
      #- "Clash/v1.18.8"
      #- "Clash.meta/2.2.2"
      - "FlClash/0.8.88"
      #- "Clash-verge/2.2.2"
      # Accept:
      # - 'application/vnd.github.v3.raw'
      # Authorization:
      # - 'token 1231231'
    health-check: # 示例：网络健康检查（测试延迟）
      enable: true # 示例：是否启用
      url: http://www.gstatic.com/generate_204 # 示例：网络健康检查 url 地址
      interval: 600 # 示例：健康检查间隔时间，单位为秒
      timeout: 3000
      lazy: true # 懒惰状态，默认为 true,不使用该集合节点时，不进行测试
      expected-status: "*" # 健康检查时期望的 HTTP 响应状态码。默认为 "*" 表示对响应状态不做要求匹配(200/204/302/400-503) 200 和 204 和 302 以及 400 到 503 状态码
    override: # 示例：覆写节点内容
      ip-version: dual # 设置节点使用 ip 版本，可选：dual(双向)/ipv4/ipv6/ipv4-prefer(优先IPV4)/ipv6-prefer(优先IPV6)
      tfo: false # 示例：启用 tcp fast open, 仅生效于 tcp 协议
      mptcp: false # 示例：启用 tcp multi path, 仅生效于 tcp 协议
      udp: true # 示例：启用 udp 支持
      udp-over-tcp: false # 示例：启用 udp over tcp
      skip-cert-verify: true # 示例：跳过证书验证
      #down: "5000 Mbps" # 示例：下载速度默认以 mbps 为单位
      #up: "1000 Mbps" # 示例：上传速度默认以 mbps 为单位
      #dialer-proxy: 🌐 Global # 示例：一个出站代理的标识。当值不为空时，将使用指定的 proxy/proxy-group 发出连接
      #interface-name: wlan # 指定节点绑定的接口，从此接口发起连接
      routing-mark: 68686 # 发起连接时附加的路由标记
      additional-prefix: "Sub~" # 为节点名称添加固定前缀
      #additional-suffix: "~Nodes" # 为节点名称添加固定后缀
      proxy-name: # 对节点名称内容进行替换，支持正则表达式，pattern 为替换内容，target 为替换目标
      - pattern: "IPLC-(.*?)倍"
        target: "iplc x $1"
      - pattern: "Cloudflare"
        target: "cf*"
        
# 本地代理服务器筛选
  Nodes: 
    type: file # 本地代理服务器
    path: ./proxy/Nodes.yaml
    #url: https://sub.store/download/collection/node
    interval: 86400
    proxy: 🐟 Final
    size-limit: 0
    #filter: "(?i)🇭🇰|港|香港|hk|HK|HongKong|🇹🇼|台|臺灣|tw|TW|Taiwan|🇯🇵|日|日本|东京|jp|JP|Japan|🇰🇷|韩|韓|首尔|朝鲜|kr|KR|Korea|🇸🇬|新|狮|新加坡|狮城|sg|SG|Singapore|🇺🇸|美|美国|美國|us|US|America"
    exclude-filter: "(?i)(订阅|流量|剩余|套餐|到期|过滤|重置|距离|过期|线路|官网|网站|网址|地址|备用|客服|群|邀请|返利|循环|已用|联系|邮箱)"
    #exclude-type: "ss|ssr|http|vmess|vless|trojan|socks5|snell|hysteria|hysteria2|wireguard|tuic"
    header: 
      User-Agent:
      #- "Clash/v1.18.8"
      #- "Clash.meta/2.2.2"
      #- "FlClash/0.8.88"
      - "Clash-verge/2.2.2"
      # Accept:
      # - 'application/vnd.github.v3.raw'
      # Authorization:
      # - 'token 1231231'      
    health-check:
      enable: true
      url: http://connectivitycheck.gstatic.com/generate_204
      interval: 600
      timeout: 3000
      lazy: true
      expected-status: "*"
    override: 
      ip-version: dual
      tfo: false
      mptcp: false
      udp: true
      udp-over-tcp: false
      skip-cert-verify: true
      #down: "5000 Mbps"
      #up: "1000 Mbps"
      #dialer-proxy: 🌐 Global
      #interface-name: wlan
      routing-mark: 89898
      #additional-prefix: "Sub~"
      additional-suffix: "~Nodes"
      proxy-name: 
      - pattern: "IPLC-(.*?)倍"
        target: "iplc x $1"
      - pattern: "Cloudflare"
        target: "cf*"
        
#💡 策略组
# select：手动选择策略组
# url-test：自动策略组,将按照url测试结果使用延迟最低节点
# relay：代理链策略组，目前 relay 可以支持 udp 的只有 vmess/vless/trojan/ss/ssr/tuic，wireguard 目前不支持在 relay 中使用，请使用 proxy 中的 dialer-proxy 配置项，Traffic: clash <-> http <-> vmess <-> ss1 <-> ss2 <-> Internet
# load-balance：负载均衡策略，将按照算法随机选择节点,不同的请求使用不同的代理（可选参数：strategy: consistent-hashing # consistent-hashing：相同的请求分配给同一个代理，round-robin：所有请求使用不同的代理）
# fallback：故障转移策略组，按照节点顺序选择,直到该策略超时，才选择下一个可用代理
# > 策略组添加可选参数示例：
# proxies: "proxies, proxy-providers" 手动添加出站代理或其他策略组
# use: "proxies" 手动添加代理集合
# icon: "url" 策略组添加图标显示
# filter: (?i)(🇭🇰|港|香港|hk|HK|Hong|HongKong) # 筛选满足关键词或正则表达式的节点
# exclude-filter: (?i)(台|日|韩|新|狮|美) # 排除满足关键词或正则表达式的节点
# exclude-type: "vmess|hysteria2" # 不支持正则表达式，通过 | 分割，根据节点 "协议" 类型（socks5、Shadowsocks、ShadowsocksR、http、snell、vmess、vless、Trojan、hysteria、hysteria2、wireguard、tuic）排除，注意：proxy-groups 与 proxy-providers 写法不同
# expected-status: "*" # 健康检查时期望的 HTTP 响应状态码，当响应状态码与期望状态一致时才认为节点可用
# disable-udp: true # 禁用 udp 流量转发
# url: http://www.gstatic.com/generate_204 # 对组内代理节点进行延迟检查的 url 地址
# interval: 600 # 间隔检测时间，单位：秒
# tolerance: 50 # 网络间隔相差值，进行节点切换，否则不进行切换
# timeout: 3000 # 健康检查超时时间，单位：毫秒
# max-failed-times: 3 # 最大失败次数，超过则触发一次强制健康检查，默认 5
# lazy: true # 懒惰模式，如果设置为 true，策略组在未被使用时停止检测
# include-all: true # 引入所有出站代理节点以及代理集合，可选 false，会使 include-all-proxies 和 include-all-providers 失效
# include-all-proxies: true # 引入所有出站代理节点，可选 false，引入不包含策略组，可在 proxies 引入其他策略组
# include-all-providers: true # 引入所有代理集合，可选 false
# hidden: true # 隐藏策略组
proxy-groups:
  - name: 🔰 Pick
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/pick.png
    proxies:
      - ♻️ Auto
      - ✅ Node
      - 🌤️ Warp+
      - ⚠️ Fallback
      - ⚖️ Load Balance
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations
      - 🇨🇳 Chinese
      - DIRECT
      - REJECT
      - REJECT-DROP
      - PASS

  - name: ♻️ Auto
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/auto.png
    url: http://www.gstatic.com/generate_204 # 示例：延迟检查的 url 地址
    interval: 600 # 示例：间隔检测时间，单位：秒
    tolerance: 0 # 示例：网络间隔相差值
    timeout: 3000 # 示例：健康检查超时时间，单位：毫秒
    max-failed-times: 3 # 示例：最大失败次数，超过则触发一次强制健康检查
    lazy: true # 示例：懒惰模式
    #filter: (?i)(🇭🇰|港|香港|hk|HK|Hong|HongKong) # 示例：筛选满足关键词或正则表达式的节点
    #exclude-filter: (?i)(台|日|韩|新|狮|美) # 示例：排除满足关键词或正则表达式的节点
    #exclude-type: "ss|ssr|http|vmess|vless|trojan|socks5|snell|hysteria|hysteria2|wireguard|tuic" # 示例：根据节点 "协议" 类型筛选
    #expected-status: " * " # 示例：健康检查时期望的 HTTP 响应状态码
    #include-all: true # 示例：引入所有出站代理节点以及代理集合
    #include-all-proxies: true # 示例：引入所有出站代理节点
    include-all-providers: true # 示例：引入所有代理集合
    #disable-udp: true # 示例：禁用 udp 流量转发
    #hidden: true # 示例：隐藏策略组
      
  - name: ✅ Node
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/node.png
    url: http://www.gstatic.com/generate_204
    timeout: 3000
    max-failed-times: 3
    include-all: true

  - name: 🌤️ Warp+
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/warp.png
    url: http://www.gstatic.com/generate_204
    timeout: 3000
    max-failed-times: 3
    include-all-proxies: true

  - name: ⚠️ Fallback
    type: fallback
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/fallback.png
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    timeout: 3000
    max-failed-times: 3
    lazy: true
    proxies:
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: ⚖️ Load Balance
    type: load-balance
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/load.png
    strategy: consistent-hashing # consistent-hashing：相同的请求分配给同一个代理，round-robin：所有请求使用不同的代理
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    timeout: 3000
    max-failed-times: 3
    lazy: true
    proxies:
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations
      
  - name: 🇭🇰 HongKong
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/hongkong.png
    filter: (?i)(🇭🇰|香港|hk|hong|hongkong)
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    timeout: 3000
    max-failed-times: 3    
    lazy: true
    include-all-providers: true

  - name: 🇹🇼 Taiwan
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/taiwan.png
    filter: (?i)(🇹🇼|台湾|台北|臺灣|tw|tai|taiwan)
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    timeout: 3000
    max-failed-times: 3
    lazy: true
    include-all-providers: true

  - name: 🇯🇵 Japan
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/japan.png
    filter: (?i)(🇯🇵|日本|川日|东京|大阪|泉日|埼玉|沪日|深日|jp|japan)
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    timeout: 3000
    max-failed-times: 3
    lazy: true
    include-all-providers: true
      
  - name: 🇰🇷 Korea
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/korea.png
    filter: (?i)(🇰🇷|韩国|韓國|首尔|朝鲜|kr|kor|korea)
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    timeout: 3000
    max-failed-times: 3    
    lazy: true
    include-all-providers: true
    
  - name: 🇸🇬 Singapore
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/singapore.png
    filter: (?i)(🇸🇬|新加坡|狮城|sg|singapore)
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    timeout: 3000
    max-failed-times: 3    
    lazy: true
    include-all-providers: true

  - name: 🇺🇸 America
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/america.png
    filter: (?i)(🇺🇸|美国|美國|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|us|america)
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    timeout: 3000
    max-failed-times: 3    
    lazy: true
    include-all-providers: true

  - name: 🇺🇳 Nations
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/nations.png
    exclude-filter: (?i)(Warp|🇨🇳|中国|大陆|国内|回国|cn|china|电信|移动|联通|腾讯|阿里|教育|校园|直连|🇭🇰|香港|hk|hong|hongkong|🇹🇼|台湾|台北|臺灣|tw|tai|taiwan|🇯🇵|日本|川日|东京|大阪|泉日|埼玉|沪日|深日|jp|japan|🇰🇷|韩国|韓國|首尔|朝鲜|kr|kor|korea|🇸🇬|新加坡|狮城|sg|singapore|🇺🇸|美国|美國|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|us|america)
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    timeout: 3000
    max-failed-times: 3    
    lazy: true
    include-all-providers: true

  - name: 🇨🇳 Chinese
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/chinese.png
    filter: (?i)(🇨🇳|中国|大陆|国内|回国|cn|china|电信|移动|联通|腾讯|阿里|教育|校园|直连)
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    timeout: 3000
    max-failed-times: 3    
    lazy: true
    include-all-providers: true

  - name: 🕸️ Speedtest
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/speedtest.png
    proxies:
      - 🇨🇳 China
      - 🔰 Pick
      - ✅ Node
      
  - name: 🎵 TikTok
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/tiktok.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations
      - 🇨🇳 China

  - name: ✉️ Telegram
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/telegram.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 🗣️ Discord
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/discord.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 🎶 Spotify
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/spotify.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 📽️ Netflix
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/netflix.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 📼 Disney+
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/disney.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 📹 YouTube
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/youtube.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations
      
  - name: 🤖 OpenAI
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/openai.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 🛒 Amazon
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/amazon.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 🎭 Facebook
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/facebook.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 📟 Google
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/google.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America      
      - 🇺🇳 Nations

  - name: 🖥️ Microsoft
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/microsoft.png
    proxies:
      - 🇨🇳 China
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 🍎 Apple
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/apple.png
    proxies:
      - 🇨🇳 China
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 🎬 Global Media
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/streaming.png
    proxies:
      - 🌐 Global
      - 🔰 Pick

  - name: 🌐 Global
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/global.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 📺 China Media
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/media.png
    proxies:
      - 🇨🇳 China
      - 🔰 Pick

  - name: 🇨🇳 China
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/china.png
    proxies:
      - DIRECT
      - 🔰 Pick
      - ✅ Node
      - 🇨🇳 Chinese

  - name: 🐟 Final
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/final.png 
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇨🇳 China
      - ⛔ AdBlock

  - name: ⛔ AdBlock
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/adblock.png
    proxies:
      - REJECT
      - REJECT-DROP
      - PASS
      - 🇨🇳 China
      - 🔰 Pick
      - ✅ Node

#💡 远程分流规则集合
# name： 名称 (🌐 Global ) 必须，且不能重复
# type: http 可选 http / file / inlinee，类型为 http 则必须配置
# behavior: classical 对应不同的文件格式：domain/ipcidr/classical
# url: "https://www.example.org" 类型为 http 则必须配置
# interval: 600 更新 provider 的时间，单位为秒
# path: ./rule1.yaml 可选文件路径，不可重复，不填写时会使用 url 的 MD5 作为此文件的文件名
# proxy: DIRECT 经过指定代理进行下载/更新
# size-limit: 0 限制下载文件的最大大小，默认为 0 即不限制文件大小，单位为字节 (b)
# format: yaml 可选 yaml/text/mrs，默认 yaml。mrs目前 behavior 仅支持 domain/ipcidr
rule-providers:
  🚥 Direct:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Direct/Direct.yaml
    path: ./rule/Direct.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🚥 Lan:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Lan/Lan.yaml
    path: ./rule/Lan.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  ⛔ Privacy:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Privacy/Privacy_Classical.yaml
    path: ./rule/Privacy_Classical.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final
    
  ⛔ Hijacking:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Hijacking/Hijacking.yaml
    path: ./rule/Hijacking.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final
   
  ⛔ AdLite:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/AdvertisingLite/AdvertisingLite_Classical.yaml
    path: ./rule/AdvertisingLite_Classical.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  ⛔ HttpDNS:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/BlockHttpDNS/BlockHttpDNS.yaml
    path: ./rule/BlockHttpDNS.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🕸️ Speedtest:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Speedtest/Speedtest.yaml
    path: ./rule/Speedtest.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🎵 TikTok:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/TikTok/TikTok.yaml
    path: ./rule/TikTok.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  ✉️ Telegram:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Telegram/Telegram.yaml
    path: ./rule/Telegram.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🗣️ Discord:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Discord/Discord.yaml
    path: ./rule/Discord.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🎶 Spotify:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Spotify/Spotify.yaml
    path: ./rule/Spotify.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  📽️ Netflix:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Netflix/Netflix.yaml
    path: ./rule/Netflix.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  📼 Disney+:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Disney/Disney.yaml
    path: ./rule/Disney.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  📹 YouTube:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube.yaml
    path: ./rule/YouTube.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🤖 OpenAI:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OpenAI/OpenAI.yaml
    path: ./rule/OpenAI.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🛒 Amazon:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Amazon/Amazon.yaml
    path: ./rule/Amazon.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🎭 Facebook:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Facebook/Facebook.yaml
    path: ./rule/Facebook.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  📟 Google:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Google/Google.yaml
    path: ./rule/Google.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🖥️ Microsoft:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Microsoft/Microsoft.yaml
    path: ./rule/Microsoft.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🍎 Apple.ota:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/SystemOTA/SystemOTA.yaml
    path: ./rule/SystemOTA.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🍎 Apple:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Apple/Apple_Classical.yaml
    path: ./rule/Apple_Classical.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🎬 Global Media:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GlobalMedia/GlobalMedia_Classical.yaml
    path: ./rule/GlobalMedia_Classical.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🌐 Global:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Global/Global_Classical.yaml
    path: ./rule/Global_Classical.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  📺 China Media:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMedia/ChinaMedia.yaml
    path: ./rule/ChinaMedia.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🇨🇳 China:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/China/China_Classical.yaml
    path: ./rule/China_Classical.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🇨🇳 China.ips:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaIPs/ChinaIPs_Classical.yaml
    path: ./rule/ChinaIPs_Classical.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

  🇨🇳 China.bgp:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaIPsBGP/ChinaIPsBGP_Classical.yaml
    path: ./rule/ChinaIPsBGP_Classical.yaml
    interval: 259200
    format: yaml
    size-limit: 0
    #proxy: 🐟 Final

#💡 规则匹配策略，包含代理和策略组，每一条规则都必须有一个策略，规则将按照从上到下的顺序匹配
# RULE-SET：引用规则集合
# SUB-RULE:引用子规则，匹配到规则时, 将请求送往另一规则流程，如果在 sub-rule 内没匹配到，则会退回常规规则流程
# DOMAIN：域名规则，如果请求的域完全匹配，则会匹配上此规则
# DOMAIN-SUFFIX：域名后缀规则，如果请求的域名后缀匹配，则会匹配上此规则
# DOMAIN-KEYWORD：域名关键词规则，如果请求的域名中包含关键字，则会匹配上此规则
# DOMAIN-REGEX：匹配域名正则表达式
# PROCESS-NAME：进程规则，匹配进程名称（Android 平台可以匹配包名）
# PROCESS-PATH：进程路径规则，匹配完整进程路径
# IP-CIDR：ip 范围规则，请求 ipv4 匹配的指定范围 参考：https://www.ipaddressguide.com/
# IP-CIDR6：ip 范围规则，请求 ipv6 匹配的指定范围
# IP-SUFFIX：匹配 IP 后缀范围
# IP-ASN：匹配 IP 所属 ASN
# no-resolve：跳过域名去进行 dns 解析，当请求为域名匹配到 geoip 或 ip-cidr 规则时，clash 将请求 dns 查询来检查域名的 ip 是否匹配此条规则
# SRC-GEOIP：匹配来源 IP 所属国家代码
# SRC-IP-ASN：匹配来源 IP 所属 ASN
# SRC-IP-CIDR：来源 ipv4 的 ip 范围规则，匹配请求的客户端 ip 地址范围
# SRC-IP-SUFFIX：匹配来源 IP 后缀范围
# DST-PORT：从目标端口规则，匹配请求的目标端口
# SRC-PORT：从来源端口规则，匹配请求来源的端口
# AND：逻辑规则，规则内的条件都必须满足
# OR：逻辑规则，规则内的条件只需满足一项即可
# NOT：逻辑规则，必须为规则内不包含的条件
# IN-TYPE：匹配流量入站的类型，支持的类型（HTTP/SOCKS/TUN/TPROXY/REDIR/INNER）
# IN-USER：匹配入站用户名, 目前仅 vmess 入站支持配置用户名
# IN-NAME：匹配入站名称
# IN-PORT：匹配入站端口
# NETWORK：匹配入站流量的类型，匹配入站流量的类型 tcp / udp
# UID：匹配 Linux USER ID
# DSCP：匹配DSCP标记 (仅限 tproxy udp 入站)
# GEOIP：根据 geoip 地址国家/地区，匹配集合内相应的 ip 范围
# GEOSITE：域名集合，匹配集合内的域名 参考：https://github.com/v2fly/domain-list-community/tree/master/data
# MATCH：兜底规则，不在规则中的请求（规则必须写在其他规则之后，它会直接匹配所有的请求）
rules:
  - DOMAIN, router.local, 🇨🇳 China
  - DOMAIN-SUFFIX, home.arpa, 🇨🇳 China
  - DOMAIN-KEYWORD, localhost, 🇨🇳 China
  - DOMAIN-REGEX, ^https?:\/\/(www|m)\.google\.cn, 📟 Google
  - IP-CIDR, 10.0.0.0/8, 🇨🇳 China, no-resolve　　　　　　
  - IP-CIDR, 100.64.0.0/10, 🇨🇳 China, no-resolve
  - IP-CIDR, 127.0.0.0/8, 🇨🇳 China, no-resolve
  - IP-CIDR, 172.16.0.0/12, 🇨🇳 China, no-resolve
  - IP-CIDR, 192.168.0.0/16, 🇨🇳 China, no-resolve
  - IP-CIDR, 224.0.0.0/24, 🇨🇳 China, no-resolve
  - IP-CIDR, 169.254.0.0/16, 🇨🇳 China, no-resolve
  - IP-CIDR, 183.240.197.130/32, 🇨🇳 China, no-resolve
  - IP-CIDR6, 2620:0:2d0::/48, 🇨🇳 China, no-resolve
  - IP-SUFFIX, 114.114.112.0/21, 🇨🇳 China, no-resolve
  - IP-ASN, 20940, 🌐 Global
  - SRC-GEOIP, JP, 🌐 Global
  - SRC-IP-ASN, 133877, 🌐 Global
  - SRC-IP-CIDR, 239.255.255.250/32, 🇨🇳 China, no-resolve
  - SRC-IP-SUFFIX, 192.168.1.0/8, 🇨🇳 China, no-resolve
  #- SRC-PORT, 7777, 🇨🇳 China  
  - DST-PORT, 1400, ✉️ Telegram
  #- DST-PORT, 114/514, 🇨🇳 China # 示例：匹配 114 和 514 端口
  #- DST-PORT, 114-514, 🇨🇳 China # 示例：匹配 114 到 514 端口
  #- DST-PORT, 114/233/514-1919, 🇨🇳 China # 示例：匹配 114 和 233 以及 514 到 1919
  #- DSCP, 4, 🌐 Global
  #- UID, 1001, 🇨🇳 China
  #- NETWORK, tcp, 🇨🇳 China
  #- IN-NAME, name, 🌐 Global
  #- IN-USER, vmess, 🌐 Global
  #- IN-TYPE, SOCKS, 🌐 Global
  #- IN-PORT, 7890, 🇨🇳 China
  - PROCESS-NAME, Notion.exe, 🌐 Global
  - PROCESS-NAME, OneDriveUpdater.exe, 🌐 Global
  - PROCESS-PATH, C:\Program Files\Microsoft OneDrive\OneDrive.exe, 🌐 Global
  - AND, ((DOMAIN-SUFFIX, bilibili.com), (NETWORK, UDP), (DST-PORT, 4483)), ⛔ AdBlock # AND：规则内的条件都必须满足时才会匹配
  - AND, ((DOMAIN-SUFFIX, bilibili.com), (NETWORK, UDP), (DST-PORT, 9305)), ⛔ AdBlock 
  - AND, ((NETWORK, UDP), (DST-PORT, 443)), ⛔ AdBlock # 示例：匹配网络类型为 udp 指定端口的请求
  - AND, ((NETWORK, UDP), (DST-PORT, 3478)), ⛔ AdBlock
  - AND, ((NETWORK, UDP), (DST-PORT, 19302)), ⛔ AdBlock
  #- AND, ((DST-PORT, 22), (GEOIP, CN, no-resolve)), 🇨🇳 China # ip 类规则可用 no-resolve,  需书写在括号内
  - OR, ((DOMAIN-KEYWORD, httpdns), (DOMAIN-KEYWORD, httpsdns)), ⛔ AdBlock  # OR：规则内的条件只需满足一项时匹配
  - OR, ((DOMAIN-KEYWORD,  p2ptun),  (DOMAIN-KEYWORD,  p2plive),  (DOMAIN-KEYWORD,  p2plog)), ⛔ AdBlock
  #- NOT, ((GEOIP, CN, no-resolve)), 🌐 Global # NOT：规则内不包含的条件时匹配
  #- NOT, ((DOMAIN, baidu.com)), 🌐 Global
  - RULE-SET, 🚥 Direct, 🇨🇳 China
  - RULE-SET, 🚥 Lan, 🇨🇳 China
  - RULE-SET, ⛔ Privacy, ⛔ AdBlock
  - RULE-SET, ⛔ Hijacking, ⛔ AdBlock
  - RULE-SET, ⛔ AdLite, ⛔ AdBlock
  - RULE-SET, ⛔ HttpDNS, ⛔ AdBlock
  - RULE-SET, 🕸️ Speedtest, 🕸️ Speedtest
  - RULE-SET, 🎵 TikTok, 🎵 TikTok
  - RULE-SET, ✉️ Telegram, ✉️ Telegram
  - RULE-SET, 🗣️ Discord, 🗣️ Discord
  - RULE-SET, 🎶 Spotify, 🎶 Spotify
  - RULE-SET, 📽️ Netflix, 📽️ Netflix
  - RULE-SET, 📼 Disney+, 📼 Disney+
  - RULE-SET, 📹 YouTube, 📹 YouTube
  - RULE-SET, 🤖 OpenAI, 🤖 OpenAI
  - RULE-SET, 🛒 Amazon, 🛒 Amazon
  - RULE-SET, 🎭 Facebook, 🎭 Facebook
  - RULE-SET, 📟 Google, 📟 Google
  - RULE-SET, 🖥️ Microsoft, 🖥️ Microsoft
  - RULE-SET, 🍎 Apple.ota, ⛔ AdBlock
  - RULE-SET, 🍎 Apple, 🍎 Apple
  - RULE-SET, 🎬 Global Media, 🎬 Global Media
  - RULE-SET, 🌐 Global, 🌐 Global
  - RULE-SET, 📺 China Media, 📺 China Media
  - RULE-SET, 🇨🇳 China, 🇨🇳 China
  - RULE-SET, 🇨🇳 China.ips, 🇨🇳 China
  - RULE-SET, 🇨🇳 China.bgp, 🇨🇳 China
  - GEOIP, cn, 🇨🇳 China
  - GEOSITE, cn, 🇨🇳 China
  - SUB-RULE, (OR, ((NETWORK, TCP), (NETWORK, UDP))), local
  - SUB-RULE, (AND, ((NETWORK, UDP))), adblock # 示例：括号内可以使用任意规则  
  - MATCH, 🐟 Final
  
#💡 引用子规则，匹配到规则时，将请求送往另一规则流程
sub-rules:
  local:
    - DOMAIN-KEYWORD, lan, 🇨🇳 China
    - DOMAIN-SUFFIX, local, 🇨🇳 China
    - IP-CIDR, 17.0.0.0/8, 🇨🇳 China
    - IP-CIDR, 182.254.116.0/24, 🇨🇳 China
    - IP-CIDR6, fe80::/10, 🇨🇳 China
  adblock:
    - DOMAIN, qzs.qq.com, ⛔ AdBlock
    - DOMAIN, ocsp.apple.com, ⛔ AdBlock
