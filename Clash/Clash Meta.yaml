# 使用 yaml 格式，大小写敏感，使用缩进表示层级关系，缩进不允许使用 tab, 只允许空格，缩进的空格数不重要，只要相同层级的元素左对齐即可
# 对象键值对使用冒号结构表示 key: value, 冒号后面要加一个空格，使用缩进表示层级关系，示例：enable: true
# ipv6 地址应当使用 [] 来框选，示例：[aaaa::a8aa:ff:fe09:57d9]:853 带端口的 ipv6 地址
# 使用通配符时，应当使用引号 ''或 " " 将内容包裹起来，以免过度匹配
# meta 配置详解：https://wiki.metacubex.one
# meta 配置示例：https://github.com/MetaCubeX/mihomo/blob/Alpha/docs/config.yaml
# 第三方 web 管理页面：http://clash.razord.top/ 、http://yacd.haishan.me/、https://clash.metacubex.one/、https://yacd.metacubex.one/、https://d.metacubex.one/、https://metacubex.github.io/metacubexd

# 2024.09.01
# 注释：在 yaml 格式的文件中，以 "#" 作为注释开头，行尾为结尾，"#" 必须在行头或者必须在前方有空格，否则不视为注释

# other 设置补充说明
# 自定义 geoip & ipasn 数据库
# https://github.com/Hackl0us/GeoIP2-CN
# https://github.com/Loyalsoldier/geoip

# 网络连通性检查使用的 url
# http://www.google.com/generate_204
# http://www.gstatic.com/generate_204
# http://www.qualcomm.cn/generate_204
# http://cp.cloudflare.com/generate_204
# http://captive.apple.com/generate_204

#💡 通用设置
mode: rule # 运行模式:rule 规则、global 全局、direct 直连、script 脚本

log-level: info  # 日志模式:silent 静默、info 信息、warning 警告、error 错误、debug 调试

ipv6: true # ipv6 支持，关闭将阻断所有 ipv6 链接和屏蔽 dns 请求 aaaa 记录

port: 7898 # 本地 http(s) 代理端口
socks-port: 7899 # 本地 socks4/4a/5 代理端口
mixed-port: 7890 # 混合端口是一个特殊的端口, 它同时支持 http(s) 和 socks5 协议. 您可以使用任何支持 http 或 socks 代理的程序连接到这个端口
redir-port: 7892 # 透明代理端口，仅能代理 tcp 流量
tproxy-port: 7893  # 透明代理端口，可代理 tcp 与 udp 流量

routing-mark: 6666 # 为 linux 下的出站连接提供默认流量标记

allow-lan: true # 允许局域网内其它设备通过 clash 访问互联网
bind-address: "*" # 仅适用 allow-lan 为 true 的情况，绑定 ip 仅允许某个ip访问代理端口：支持三种参数："*" 绑定所有ip地址，192.168.188.188 绑定一个的ipv4地址，[aaaa::a8aa:ff:fe09:57d8] 绑定一个 ipv6 地址
#authentication:  # 本地 http(s)、socks 服务端口验证的用户名和密码
#  - "admin:password"
#skip-auth-prefixes: # 本地 http(s)、socks 服务端口跳过验证的 ip 段
#  - "127.0.0.1/8"
#  - "::1/128"
lan-allowed-ips: # 允许连接的 ip 地址段，仅作用于 allow-lan 为 true, 默认值为 0.0.0.0/0 和 ::/0
  - "0.0.0.0/0"
  - "::/0"
lan-disallowed-ips: # 禁止连接的 ip 地址段, 黑名单优先级高于白名单, 默认值为空
  - "192.168.0.3/32"

#interface-name: en0 # 指定 clash 流量出站接口网卡

tcp-concurrent: true  # # TCP 并发连接所有 IP, 将使用最快握手的 TCP

disable-keep-alive: false # 目前在 android 端强制为 true
keep-alive-idle: 15
keep-alive-interval: 15 # 控制发出 tcp keep alive 包的间隔，减少移动设备耗电问题的临时措施

unified-delay: true # 更换延迟计算方式,去除握手等额外延迟

global-ua: Chrome/128.0.6  # 自定义外部资源下载时使用的的 ua，默认为 clash.meta
global-client-fingerprint: chrome # 全局客户端 TLS 指纹，优先低于 proxy 内的 client-fingerprint, 支持协议有 VLESS,Vmess 和 trojan，可选 chrome/firefox/safari/ios/android/edge/360/qq/random

experimental: # 禁用 quic-go-gso 支持, 这可能会导致 linux 上的性能降低
  quic-go-disable-gso: false

external-controller: 127.0.0.1:9090 # api 监听地址，你可以将 127.0.0.1 修改为 0.0.0.0 来监听所有 ip
external-controller-tls: 127.0.0.1:9443 # https-api 监听地址，需要配置 tls 部分证书和其私钥配置，使用 tls 也必须填写 external-controller
#external-controller-unix: mihomo.sock # Unix socket API 监听地址，测试方法： curl -v --unix-socket "mihomo.sock" http://localhost/
#external-doh-server: https://dns.alidns.com/dns-query # 在 RESTful API 端口上开启 DOH 服务器
secret: "password" # http(s)-api、api 监听地址外部控制器访问密钥

#external-ui: /ui/metacubexd # 配置外部控制器 web ui 目录，存放配置文件的相对路径，或存放网页静态资源的绝对路径，clash core 将会将其部署在 http://{{external-controller}}/ui
#external-ui-name: metacubexd # 自定义外部用户界面名字
#external-ui-url: "https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip" # 自定义外部用户界面下载地址

#tls: # 目前仅用于 api 监听地址外部控制器的证书私钥
#  certificate: string # 证书 pem 格式，或者 证书的路径
#  private-key: string # 证书对应的私钥 pem 格式，或者私钥路径
#  custom-certifactes:
#    - |
#      -----BEGIN CERTIFICATE-----
#      format/pem...
#      -----END CERTIFICATE-----

find-process-mode: strict # 查找进程模式有3个值：always 开启，强制匹配所有进程。strict 默认，由 clash 判断是否开启。off 不匹配进程，推荐在路由器上使用此模式。

geodata-mode: true # geoip.dat 数据库开关，false 使用 mmdb 数据库
geodata-loader: memconservative # geo 文件加载模式：standard：标准加载器，memconservative：专为内存受限(小内存)设备优化的加载器(默认值)
geo-auto-update: true # 自动更新 GEO
geo-update-interval: 72 # 更新间隔，单位为小时
geox-url: # 自定 GEO 下载地址
  geoip: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoIP.dat"
  geosite: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/country.mmdb"
  asn: "https://raw.githubusercontent.com/Loyalsoldier/geoip/release/GeoLite2-ASN.mmdb"
  
geosite-matcher: succinct # geosite 匹配模式：succinct：默认 rule-set 分流模式，mph：V2Ray 或 Xray 混合模式

profile:  # profile 为扩展配置, 仅作为缓存项使用(文件位置 ./cache.db)
  store-selected: true # 储存 api 对策略组的选择，以供下次启动时使用
  store-fake-ip: true # 储存 fakeip 映射表，域名再次发生连接时，使用原有映射地址

#💡 同步时间中心 ntp 服务
ntp:
  enable: true # 是否启用 ntp 服务
  write-to-system: true # 是否同步至系统时间，需要 root、管理员模式运行
  server: ntp.aliyun.com # ntp 服务地址，默认 ntp.aliyun.com
  port: 123 # ntp 服务端口，默认 123
  interval: 600 # 同步时间间隔，单位（分），默认同步间隔为 60 分

#💡 虚拟网卡 tun 模式配置
tun:
  enable: false # tun 模式开关
  stack: system # 网络栈类型 system > mixed > gvisor > lwip，system 栈占用低, 建议使用 mixed 栈，macos 用户推荐 gvisor 栈
  auto-detect-interface: true # 自动识别出口网卡
  auto-route: true # 自动设置全局路由,可以自动将全局流量路由进入 tun 网卡
  auto-redir: true # 自动重定向开关
  strict_route: true # 将所有连接路由到 tun 来防止泄漏，但你的设备将无法其他设备被访问
  device: Meta # 指定 tun 网卡名称，macos 设备只能使用 utun 开头的网卡名
  #mtu: 9000 # 最大传输单元, 可用值为 1-65534, 会影响极限状态下的速率,一般用户默认即可
  #gso: false # 启用通用分段卸载，仅支持 Linux
  #gso-max-size: 65536 # 通用分段卸载包的最大大小
  dns-hijack: # dns 劫持仅支持 tcp/udp
    - any:53
  inet4_route_address: # 启用 auto_route 时使用自定义路由而不是 ipv4 默认路由
    - "0.0.0.0/1"
    - "128.0.0.0/1"
  inet6_route_address: # 启用 auto_route 时使用自定义路由而不是 ipv6 默认路由
    - "::/1"
    - "8000::/1"
  #endpoint-independent_nat: false # 启用独立于端点的 NAT，性能可能会略有下降，在不需要的时候不建议开启
  #include-uid: # 包含的用户使用 tun，未被配置的用户不会使用，默认不限制
  #- 0
  #include-uid-range: # 包含的用户范围使用 tun，未被配置的用户不会使用
  #- 1000-99999
  #exclude-uid: # 排除用户使用 tun
  #- 1000
  #exclude-uid-range: # 排除范围用户使用 tun
  #- 1000-99999
  #include-android-user: # 包含的 android 用户使用 tun，未被配置的用户不会使用
  #- 0
  #- 10
  #include-package: # 包含的 android 应用包名使用 tun，未配置的应用包不会使用
  #- com.android.chrome
  #exclude-package: # 排除 android 应用包名，使其避免使用 tun
  #- com.adguard.android

#💡 域名解析 dns 服务器配置
dns:
  enable: true  # dns 开关关闭将使用系统 dns
  ipv6: true # ipv6 解析开关如果为 false，将返回 ipv6 结果为空
  ipv6-timeout: 300 # 内部双栈并发时，向上游查询时的等待时间，默认 100ms (单位：ms)
  prefer-h3: true # doh 支持 http/3 将并发尝试开关
  listen: 0.0.0.0:53 # 需要劫持的 dns
  use-hosts: true # 是否查询配置中的 hosts
  use-system-hosts: true # 是否查询系统中的 hosts
  respect-rules: true # dns 连接跟随 rules，需配置 proxy-server-nameserver
  search-domains: [local] # 搜索域以获取 a/aaaa 记录
  enhanced-mode: fake-ip # dns 增强模式  
  fake-ip-range: 198.18.0.1/16 # fake-ip 解析地址池
  fake-ip-filter-mode: blacklist # 匹配模式默认为 blacklist（ whitelist ），如果匹配成功不返回 (返回)  fake-ip
  fake-ip-filter: # fake-ip 过滤，列表中的域名返回真实 ip
    - "*.lan"
    - "*.local"
    - "localhost"
    - "WORKGROUP"
    - "*.msftncsi.com"
    - "*.msftconnecttest.com"
    - "cable.auth.com"
    - "captive.apple.com"
    - "*.cmpassport.com"
    - "id6.me"
    - "open.e.189.cn"
    - "auth.wosms.cn"
    - "mdn.open.wo.cn"
    - "opencloud.wostore.cn"
    - "enrichgw.10010.com"
    - "localhost.*.qq.com"
    - "localhost.*.weixin.qq.com"
  
  default-nameserver: # 引导解析 dns 服务器, 只支持纯 ip dns，可使用 dot/doh 加密 
    #- system
    - "223.5.5.5"
    - "tls://120.53.53.53"
    - "https://223.6.6.6/dns-query"
    
  nameserver: # 默认 dns 服务器，支持 udp/tcp/dot/doh/doq 等协议 
    - "https://dns.alidns.com/dns-query"
    - "https://doh.pub/dns-query"
    - "quic://dns.alidns.com"
    #- "tls://223.5.5.5"
    #- "https://120.53.53.53/dns-query#Meta" # 指定出口网卡
    #- "https://223.6.6.6/dns-query#🇨🇳 China&h3=true" # 指定代理（策略组）和使用 http/3 查询，此选项与 perfer-h3 不冲突
  
  proxy-server-nameserver: # 回落 dns 服务器，解析代理服务器节点域名，查询失败将使用 nameserver，非并发查询
    - "208.67.222.222"
    - "tls://8.8.8.8"
    - "https://1.1.1.1/dns-query"

  fallback: # 当开启 fallback 时，会查询 geoip 过滤不是 cn 时用以下 dns 解析, 支持 udp/tcp/dot/doh/doq 等协议
    - "https://dns.google/dns-query"
    - "https://dns.opendns.com/dns-query"
    - "https://cloudflare-dns.com/dns-query"
    #- "quic://dns.adguard-dns.com"
    
  fallback-filter: # 配置 fallback 使用条件，回落 dns 服务器过滤
    geoip: true # 配置 geoip 开关
    geoip-code: CN # geoip 匹配区域设定，查询不是 cn 时使用 fallback 返回结果
    geosite: # 配置强制 fallback，优先于 ip 判断，具体分类自行查看 geosite 库
      - gfw
    ipcidr: # 如果不匹配 ipcidr 则使用 nameservers 中的结果 
      - 240.0.0.0/4
    domain: # 指定该域名用 fallback 解析   
      - "+.google.com"
      - "+.facebook.com"
      - "+.youtube.com"
  
  nameserver-policy: # 使用指定的 dns 服务器解析域名
    "openwrt.lan": system
    "openwrt.local": system
    "blog.google": 119.29.29.29
    "dl.google.com": https://doh.pub/dns-query
    "dl.l.google.com": https://dns.alidns.com/dns-query
    "update.googleapis.com": quic://dns.alidns.com
        
#💡 本地域名映射，类似于 /etc/hosts, 仅支持配置单个 ip
hosts:
  "*.mihomo.dev": 127.0.0.1
  "*.dev": 127.0.0.1
  "alpha.mihomo.dev": "::1"
  "doh.pub": [1.12.12.12, 120.53.53.53]
  "dns.alidns.com": [223.5.5.5, 223.6.6.6]
  "talk.google.com": 108.177.125.188
  "mtalk.google.com": 108.177.125.188
  "example.com": baidu.com # 只允许配置一个别名
  "home.lan": lan # lan 为特别字段，将加入本地所有网卡的地址
  
#💡 自定义系统代理需要绕过的域名或ip
bypass:
  - localhost
  - 127.*
  - 10.*
  - 172.16.*
  - 172.17.*
  - 172.18.*
  - 172.19.*
  - 172.20.*
  - 172.21.*
  - 172.22.*
  - 172.23.*
  - 172.24.*
  - 172.25.*
  - 172.26.*
  - 172.27.*
  - 172.28.*
  - 172.29.*
  - 172.30.*
  - 172.31.*
  - 192.168.*
  - <local>
  - ...

#💡 内置 sniffer 域名嗅探器，通过读取握手包内的域名字段，将 ip 还原成域名，有效解决 mapping 机制的短板
sniffer:
  enable: true # 配置 sniffer 开关
  parse-pure-ip: true  # 对所有未获取到域名的流量进行强制嗅探
  force-dns-mapping: true # 对 redir-host 类型识别的流量进行强制嗅探
  override-destination: true # 是否使用嗅探结果作为实际访问，默认为 true  
  sniff: # 需要嗅探的协议类型  
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  skip-domain: # 需要跳过嗅探的域名。主要解决部分站点 sni 字段非域名，导致嗅探结果异常的问题，如米家设备 
    - "Mijia Cloud"
    - "dlg.io.mi.com"
    - "+.apple.com"
  force-domain: # 需要强制嗅探的域名（默认情况下只对 IP 进行嗅探） 
    - "google.com"
  port-whitelist: # 端口白名单
    - 80
    - 443

#💡 流量入站配置,可以作为服务器
listeners:
  - name: socks5-lan
    type: socks # socks代理
    port: 10808
    listen: 0.0.0.0
    rule: rules
    proxy: 🌐 Global
    udp: true

  - name: http-lan
    type: http # http(s)代理
    port: 10809
    listen: 0.0.0.0
    rule: rules
    proxy: 🌐 Global
    udp: true

  - name: mixed-lan # 用于监听局域网流量的入站,适用于无加密传输
    type: mixed # http(s) 和socks代理混合
    port: 10810
    listen: 0.0.0.0
    rule: rules # 默认使用 rules,如果未找到 sub-rule 则直接使用 rules
    proxy: 🌐 Global # 如果不为空则直接将该入站流量交由指定 proxy 处理(当 proxy 不为空时,这里的 proxy 名称必须合法,否则会出错)
    udp: true # 默认 true

  - name: redir-lan
    type: redir
    port: 10811
    listen: 0.0.0.0
    rule: rules
    proxy: 🌐 Global

  - name: tproxy-lan
    type: tproxy
    port: 10812
    listen: 0.0.0.0
    rule: rules
    proxy: 🌐 Global
    udp: true

  - name: shadowsocks-wwan
    type: shadowsocks
    port: 10813
    listen: 0.0.0.0
    rule: rules
    proxy: 🌐 Global
    password: wEPBA9NACxZ+lfcTD0yFDrx83RNWseNw2O3yJYWeVmk=
    cipher: aes-256-gcm

  - name: vmess-wwan
    type: vmess
    port: 10814
    listen: 0.0.0.0
    rule: rules
    proxy: 🌐 Global
    users:
      - username: Clash
        uuid: 08c4ff67-599a-4d28-90a5-9d85fecd0e5b
        alterId: 0
    #ws-path: "/" # 如果不为空则开启websocket传输层
    #certificate: ./server.crt # 下面两项如果填写则开启tls（需要同时填写）
    #private-key: ./server.key

  - name: tunnel-lan
    type: tunnel
    port: 10815
    listen: 0.0.0.0
    rule: rules
    proxy: 🌐 Global
    network: [tcp, udp]
    target: www.example.org
    
#💡 隧道模式，代理转发到目标服务器（示例：127.0.0.1:7777 经过 proxy 这个 proxies/proxy-groups 访问 119.29.29.29:53）
tunnels:
  - tcp,127.0.0.1:6553,1.0.0.1:53,🌐 Global
  - tcp/udp,127.0.0.1:6666,1.1.1.1:53,🌐 Global # 一行简约配置
  - network: [tcp, udp] # 完整 yaml 配置
    address: 127.0.0.1:7777
    target: www.example.org
    proxy: 🌐 Global
  
#💡 本地代理服务器
# wireguard 代理服务器地址：engage.cloudflareclient.com，162.159.192/193/195/204.0/24，（udp 端口:2408，备选 500、1701、4500）warp 服务器优选参考：https://gitlab.com/Misaka-blog/warp-script
proxies: 
  - name: ☁️ Cloudflare~Warp Client # 代理名称,书写时请确保不会与其他代理节点重名
    type: wireguard # 代理类型,此处为 wireguard
    private-key: nvWCeA9If1axAV3HnZ5oCsck6aPb/+I/+yhbPorfSFU= # base64 编码的 wireguard 客户端私钥
    ip: 172.16.0.2 # 本机在 wireguard 网络中使用的 ipv4 地址
    ipv6: 2606:4700:110:88a4:fa34:70a2:56b7:ead6 # 可选字段，本机在 wireguard 网络中使用的 ipv6 地址
    peers: # 如果使用多个 peer，每一个 peer 的 allowed-ips 需要做区分；此时顶层段落的 server, port, ip, ipv6, public-key, pre-shared-key, reserved 等字段均会被忽略，不过private-key仍然在顶层指定
     - server: 162.159.192.1 # wireguard 服务器地址
       port: 2408 # wireguard 服务端端口
       public-key: bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=
       #pre-shared-key: 31aIhAPwktDGpH4JDhA8GNvjFXEf/a6+UaQRyOAiyfM= # 可选字段，预共享密钥
       allowed_ips: ["0.0.0.0/0","::/0"] # 可选字段，限制客户端的哪些 ip 段的流量由服务端进行转发。一般情况下可填 ['0.0.0.0/0']
       reserved: [17,176,6] # 可选字段，Wireguard 协议保留字段的值，部分 warp 节点需要使用
    mtu: 1280 # 可选字段，设置 mtu 值
    udp: true # 可选字段，是否启用 udp 支持
    persistent-keepalive: 45 # 可选字段，数据包间隔持久保活时长
    remote-dns-resolve: true # 可选字段，是否强制 dns 远程解析，默认值为 false
    dns: [1.1.1.1,2606:4700:4700::1111] # 可选字段，当 remote-dns-resolve 为 true 时生效，指定远程解析使用的 dns 服务器
    #dialer-proxy: 🇭🇰 HongKong # 指定 proxy/proxy-group 建立网络连接,用于 wireguard 配置链式代理

  - name: ☁️ Cloudflare~Warp Zero
    type: wireguard
    private-key: CJ+a9D/TltH3gxM3hg2jdyeyctYkjw6Tym4hje+H9EQ=
    ip: 172.16.0.2
    ipv6: 2606:4700:110:82f0:bb8c:8f76:fdf0:e565
    peers:
     - server: 162.159.193.1 # 域名优选 IP：engage.nanocat.cloud
       port: 2408
       public-key: bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=
       #pre-shared-key: 31aIhAPwktDGpH4JDhA8GNvjFXEf/a6+UaQRyOAiyfM=
       allowed_ips: ["0.0.0.0/0","::/0"]
       reserved: [197,215,83]
    mtu: 1280
    udp: true
    persistent-keepalive: 45
    remote-dns-resolve: true
    dns: [1.1.1.1,2606:4700:4700::1111]
    #dialer-proxy: 🇹🇼 Taiwan

  - name: ☁️ Cloudflare~Warp Team
    type: wireguard
    private-key: QOmt5UE2jp5s2vqYMKmjd714tBC7eteELAFRCEinJG4=
    ip: 172.16.0.2
    ipv6: 2606:4700:110:8f21:225d:3e30:7660:78cf
    peers:
     - server: 162.159.195.1 # 域名优选 IP：engage.nanocat.me
       port: 2408
       public-key: bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=
       #pre-shared-key: 31aIhAPwktDGpH4JDhA8GNvjFXEf/a6+UaQRyOAiyfM=
       allowed_ips: ["0.0.0.0/0","::/0"]
       reserved: [80,73,10]
    mtu: 1280
    udp: true
    persistent-keepalive: 45
    remote-dns-resolve: true
    dns: [1.1.1.1,2606:4700:4700::1111]
    #dialer-proxy: 🇯🇵 Japan

  - name: ☁️ Cloudflare~Warp Plus
    type: wireguard
    private-key: wEPBA9NACxZ+lfcTD0yFDrx83RNWseNw2O3yJYWeVmk=
    ip: 172.16.0.2
    ipv6: 2606:4700:110:89db:66c6:5265:3a6f:b92
    peers:
     - server: 162.159.204.1  # 优选 IP：https://github.com/Alvin9999/new-pac
       port: 2408
       public-key: bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=
       #pre-shared-key: 31aIhAPwktDGpH4JDhA8GNvjFXEf/a6+UaQRyOAiyfM=
       allowed_ips: ["0.0.0.0/0","::/0"]
       reserved: [173,82,247]
    mtu: 1280
    udp: true
    persistent-keepalive: 45
    remote-dns-resolve: true
    dns: [1.1.1.1,2606:4700:4700::1111]
    #dialer-proxy: 🇰🇷 Korea

  - name: ☁️ Cloudflare~Cloud
    type: vless
    server: 162.159.128.118 # 优选 IP：https://github.com/Alvin9999/new-pac
    port: 80
    uuid: 58935f45-89c2-4b82-a77c-72eee801da09
    udp: true
    tls: false
    network: ws
    servername: cloudwork.aimeto.workers.dev
    skip-cert-verify: true
    ws-opts:
      path: "/?ed=2048"
      headers:
        Host: cloudwork.aimeto.workers.dev
      v2ray-http-upgrade: false
    #dialer-proxy: 🇸🇬 Singapore # 使用指定的 proxy/proxy-group 发出连接,建立网络连接

  - name: ☁️ Cloudflare~Workers
    type: vless
    server: 104.19.38.18 # 优选 IP：https://github.com/Alvin9999/new-pac
    port: 80
    uuid: a6857f71-33c0-4584-8772-c38160210cf2
    udp: true
    tls: false
    network: ws
    servername: sub.aimeto.workers.dev
    skip-cert-verify: true
    ws-opts:
      path: "/?ed=2048"
      headers:
        Host: sub.aimeto.workers.dev
      v2ray-http-upgrade: false
    #dialer-proxy: 🇺🇸 America # 使用指定的 proxy/proxy-group 发出连接,建立网络连接

  - name: ☁️ Cloudflare~Pages
    type: vless
    server: c.aimetu.cloudns.be # 优选 IP：https://github.com/Alvin9999/new-pac
    port: 443
    uuid: 58935f45-89c2-4b82-a77c-72eee801da09
    udp: true
    tls: true
    network: ws
    servername: aimeto.pages.dev
    skip-cert-verify: true
    ws-opts:
      path: "/?ed=2048"
      headers:
        Host: aimeto.pages.dev
      v2ray-http-upgrade: false
    #dialer-proxy: 🇺🇳 Nations # # 使用指定的 proxy/proxy-group 发出连接,建立网络连接
    
#💡 远程代理服务器订阅链接，可订阅或设置多个代理服务器订阅
# filter: (?i)港|台|日|韩|新|狮|美 # 筛选满足关键词或正则表达式的节点
# exclude-filter: 港|台|日|韩|新|狮|美 # 排除满足关键词或正则表达式的节点
# exclude-type: "ss|http" # 不支持正则表达式，通过 | 分割，根据节点 "type" 类型（ss、ssr、socks5、http、snell、vmess、vless、trojan、hysteria、hysteria2、wireguard、tuic）排除排除，注意：proxy-providers 与 proxy-groups 写法不同
proxy-providers:
  Subscribe: # 远程代理服务器引用名称
    type: http # 代理服务器类型为（http：订阅，file：筛选）
    path: /proxy/Subscribe.yaml # 存储路径
    url: https://sub.store/download/collection/node # 非 clash 配置通过订阅链接转换：https://acl4ssr.netlify.app
    interval: 86400 # 示例：自动更新时长单位：秒
    #proxy: DIRECT  # 经过指定代理进行下载/更新
    #filter: "(?i)港|台|日|韩|新|狮|美" # 示例：筛选满足关键词或正则表达式的节点
    #exclude-filter: "订阅|流量|过期|剩余|套餐|到期|重置|距离|过期|线路|官网|网站|网址|地址|备用|客服|群|邀请|返利|循环|已用|联系|邮箱" # 示例：排除满足关键词或正则表达式的节点
    #exclude-type: "ss|ssr|http|vmess|vless|trojan|socks5|snell|hysteria|hysteria2|wireguard|tuic" # 示例：根据节点 "type" 类型排除
    override: # 示例：覆写节点内容
      #down: "5000 Mbps" # 示例：下载速度默认以 mbps 为单位
      #up: "1000 Mbps" # 示例：上传速度默认以 mbps 为单位
      #dialer-proxy: 🌐 Global # 示例：一个出站代理的标识。当值不为空时，将使用指定的 proxy/proxy-group 发出连接
      #interface-name: WLAN # 指定节点绑定的接口，从此接口发起连接
      routing-mark: 68686 # 发起连接时附加的路由标记
      ip-version: dual # 设置节点使用 IP 版本，可选：dual(双向)/ipv4/ipv6/ipv4-prefer(优先IPV4)/ipv6-prefer(优先IPV6)
      additional-prefix: "Subscribe~" # 为节点名称添加固定前缀
      #additional-suffix: "~Nodes" # 为节点名称添加固定后缀
      skip-cert-verify: true # 示例：跳过证书验证
      udp: true # 示例：启用 udp 支持
    header: # 自定义 http 请求头
      User-Agent:
      - "Chrome/128.0.1"
      - "Firefox/128.0.2"
      #- "Clash/v1.18.0"
      #- "mihomo/1.18.3"
      # Accept:
      # - 'application/vnd.github.v3.raw'
      # Authorization:
      # - 'token 1231231'
    health-check: # 示例：网络健康检查（测试延迟）
      enable: true # 示例：是否启用
      url: http://www.gstatic.com/generate_204 # 示例：网络健康检查 url 地址
      interval: 600 # 示例：健康检查间隔时间，单位为秒
      lazy: true # 懒惰状态，默认为 true,不使用该集合节点时，不进行测试
      timeout: 5000
      expected-status: "*" # 健康检查时期望的 HTTP 响应状态码。默认为 "*" 表示对响应状态不做要求匹配(200/204/302/400-503) 200 和 204 和 302 以及 400 到 503 状态码
      
# 本地代理服务器筛选
  Nodes: 
    type: file # 本地代理服务器
    path: /proxy/Nodes.yaml
    #url: https://sub.store/download/collection/node
    interval: 86400
    #proxy: DIRECT
    #filter: "(?i)港|台|日|韩|新|狮|美"
    #exclude-filter: "订阅|流量|过期|剩余|套餐|到期|重置|距离|过期|线路|官网|网站|网址|地址|备用|客服|群|邀请|返利|循环|已用|联系|邮箱"
    #exclude-type: "ss|ssr|http|vmess|vless|trojan|socks5|snell|hysteria|hysteria2|wireguard|tuic"
    override: 
      #down: "5000 Mbps"
      #up: "1000 Mbps"
      #dialer-proxy: 🌐 Global
      #interface-name: WLAN
      routing-mark: 89898
      ip-version: dual
      #additional-prefix: "Subscribe~"
      additional-suffix: "~Nodes"
      skip-cert-verify: true
      udp: true
    header: 
      User-Agent:
      - "Chrome/128.0.1"
      - "Firefox/128.0.2"
      #- "Clash/v1.18.0"
      #- "mihomo/1.18.3"
      # Accept:
      # - 'application/vnd.github.v3.raw'
      # Authorization:
      # - 'token 1231231'      
    health-check:
      enable: true
      url: http://www.gstatic.com/generate_204
      interval: 600
      lazy: true
      timeout: 5000
      expected-status: "*"
      
#💡 策略组
# select：手动选择策略组
# url-test：自动策略组,将按照url测试结果使用延迟最低节点
# relay：代理链策略组，目前 relay 可以支持 udp 的只有 vmess/vless/trojan/ss/ssr/tuic，wireguard 目前不支持在 relay 中使用，请使用 proxy 中的 dialer-proxy 配置项，Traffic: clash <-> http <-> vmess <-> ss1 <-> ss2 <-> Internet
# load-balance：负载均衡策略，将按照算法随机选择节点,不同的请求使用不同的代理（可选参数：strategy: consistent-hashing # consistent-hashing：相同的请求分配给同一个代理，round-robin：所有请求使用不同的代理）
# fallback：故障转移策略组，按照节点顺序选择,直到该策略超时，才选择下一个可用代理
# > 策略组添加可选参数示例：
# proxies: [Cloudflare~Warp Client, ♻️ Auto] 手动添加出站代理或其他策略组
# use: [Subscribe, Nodes] 手动添加代理集合
# icon: "url" 策略组添加图标显示
# filter: (?i)🇭🇰|港|香港|hk|HK|Hong|HongKong # 筛选满足关键词或正则表达式的节点
# exclude-filter: 台|日|韩|新|狮|美 # 排除满足关键词或正则表达式的节点
# url: http://www.gstatic.com/generate_204 # 对组内代理节点进行延迟检查的 url 地址
# interval: 600 # 间隔检测时间，单位：秒
# tolerance: 0 # 网络间隔相差值，进行节点切换，否则不进行切换
# lazy: true # 懒惰模式，如果设置为 true，策略组在未被使用时停止检测
# include-all: true # 引入所有出站代理节点以及代理集合，可选 false，会使 include-all-proxies 和 include-all-providers 失效
# include-all-proxies: true # 引入所有出站代理节点，可选 false，引入不包含策略组，可在 proxies 引入其他策略组
# include-all-providers: true # 引入所有代理集合，可选 false
# exclude-type: "Shadowsocks|http" # 不支持正则表达式，通过 | 分割，根据节点 "协议" 类型（socks5、Shadowsocks、ShadowsocksR、http、snell、vmess、vless、Trojan、hysteria、hysteria2、wireguard、tuic）排除，注意：proxy-groups 与 proxy-providers 写法不同
# disable-udp: true # 禁用 udp 流量转发
# hidden: true # 隐藏策略组
# interface-name: en0 # 指定策略组的出站接口：优先级: 代理节点 > 代理策略 > 全局
# routing-mark: 8848 # 策略组出站时附带路由标记：优先级: 代理节点 > 代理策略 > 全局
proxy-groups:
  - name: 🔰 Pick
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/pick.png
    proxies:
      - ♻️ Auto
      - ✅ Node
      - ☁️ Warp
      - 🚦 Proxy Chain
      - ⚖️ Load Balance
      - ⚠️ Fallback
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations
      - 🇨🇳 Chinese
      - DIRECT
      - REJECT
      - REJECT-DROP
      - PASS

  - name: ♻️ Auto
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/auto.png
    url: http://www.gstatic.com/generate_204 # 示例：延迟检查的 url 地址
    interval: 600 # 示例：间隔检测时间，单位：秒
    tolerance: 0 # 示例：网络间隔相差值
    lazy: true # 示例：懒惰模式
    #filter: (?i)🇭🇰|港|香港|hk|HK|Hong|HongKong # 示例：筛选满足关键词或正则表达式的节点
    #exclude-filter: 台|日|韩|新|狮|美 # 示例：排除满足关键词或正则表达式的节点
    #include-all: true # 示例：引入所有出站代理节点以及代理集合
    #include-all-proxies: true # 示例：引入所有出站代理节点
    include-all-providers: true # 示例：引入所有代理集合
    #exclude-type: "Shadowsocks|http" # 示例：根据节点 "协议" 类型
    #disable-udp: true # 示例：禁用 udp 流量转发
    #hidden: true # 示例：隐藏策略组
    #interface-name: en0 # 示例：指定出站接口
    #routing-mark: 8848 # 示例：策略组出站时附带路由标记
      
  - name: ✅ Node
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/node.png
    url: http://www.gstatic.com/generate_204
    interval: 600
    include-all: true

  - name: ☁️ Warp
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/warp.png
    include-all-proxies: true
    filter: Warp
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    lazy: true

  - name: 🚦 Proxy Chain
    type: relay
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/chain.png
    url: http://www.gstatic.com/generate_204
    interval: 600
    lazy: true
    proxies:
      - 🇭🇰 HongKong
      - ☁️ Cloudflare~Cloud

  - name: ⚖️ Load Balance
    type: load-balance
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/load.png
    strategy: consistent-hashing # consistent-hashing：相同的请求分配给同一个代理，round-robin：所有请求使用不同的代理
    url: http://www.gstatic.com/generate_204
    interval: 600
    lazy: true
    proxies:
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations
      
  - name: ⚠️ Fallback
    type: fallback
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/fallback.png
    url: http://www.gstatic.com/generate_204
    interval: 600
    lazy: true
    proxies:
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 🇭🇰 HongKong
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/hongkong.png
    filter: ^(?!.*Cloudflare).*(🇭🇰|港|香港|hk|HK|Hong|HongKong)
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    lazy: true
    include-all-providers: true

  - name: 🇹🇼 Taiwan
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/taiwan.png
    filter: ^(?!.*Cloudflare).*(🇹🇼|台|台湾|台北|臺灣|tw|TW|Tai|Taiwan)
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    lazy: true
    include-all-providers: true

  - name: 🇯🇵 Japan
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/japan.png
    filter: ^(?!.*Cloudflare).*(🇯🇵|日|日本|川日|东京|大阪|泉日|埼玉|沪日|深日|jp|JP|Japan)
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    lazy: true
    include-all-providers: true
      
  - name: 🇰🇷 Korea
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/korea.png
    filter: ^(?!.*Cloudflare).*(🇰🇷|韩|韓|韩国|韓國|首尔|朝鲜|kr|KR|KOR|Korea|South Korea|SouthKorea)
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    lazy: true
    include-all-providers: true
    
  - name: 🇸🇬 Singapore
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/singapore.png
    filter: ^(?!.*Cloudflare).*(🇸🇬|新|狮|新加坡|狮城|sg|SG|Singapore)
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    lazy: true
    include-all-providers: true

  - name: 🇺🇸 America
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/america.png
    filter: ^(?!.*Cloudflare).*(🇺🇸|美|美国|美國|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|us|US|United States|UnitedStates|America)
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    lazy: true
    include-all-providers: true

  - name: 🇺🇳 Nations
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/nations.png
    filter: ^((?!Cloudflare|🇨🇳|中国|大陆|国内|回国|cn|CN|CHINA|电信|移动|联通|腾讯|阿里|教育|校园|直连|🇭🇰|港|香港|hk|HK|Hong|HongKong|🇹🇼|台|台湾|台北|臺灣|tw|TW|Tai|Taiwan|🇯🇵|日|日本|川日|东京|大阪|泉日|埼玉|沪日|深日|jp|JP|Japan|🇰🇷|韩|韓|韩国|韓國|首尔|朝鲜|kr|KR|KOR|Korea|South Korea|SouthKorea|🇸🇬|新|狮|新加坡|狮城|sg|SG|Singapore|🇺🇸|美|美国|美國|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|us|US|United States|UnitedStates|America).)*$
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    lazy: true
    include-all-providers: true

  - name: 🇨🇳 Chinese
    type: url-test
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/chinese.png
    filter: (?i)🇨🇳|中国|大陆|国内|回国|cn|CN|CHINA|电信|移动|联通|腾讯|阿里|教育|校园|直连
    url: http://www.gstatic.com/generate_204
    interval: 600
    tolerance: 0
    lazy: true
    include-all-providers: true

  - name: 🕸️ Speedtest
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/speedtest.png
    proxies:
      - 🇨🇳 China
      - 🔰 Pick
      - ✅ Node
      
  - name: 🎵 TikTok
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/tiktok.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: ✉️ Telegram
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/telegram.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 🗣️ Discord
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/discord.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 🎶 Spotify
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/spotify.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 📽️ Netflix
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/netflix.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 📼 Disney+
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/disney.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 📹 YouTube
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/youtube.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations
      
  - name: 🤖 OpenAI
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/openai.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 🛒 Amazon
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/amazon.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 🎭 Facebook
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/facebook.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 📟 Google
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/google.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America      
      - 🇺🇳 Nations

  - name: 🖥️ Microsoft
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/microsoft.png
    proxies:
      - 🇨🇳 China
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 🍎 Apple
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/logo/apple.png
    proxies:
      - 🇨🇳 China
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 🎬 Global Media
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/streaming.png
    proxies:
      - 🌐 Global
      - 🔰 Pick

  - name: 🌐 Global
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/global.png
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇭🇰 HongKong
      - 🇹🇼 Taiwan
      - 🇯🇵 Japan
      - 🇰🇷 Korea
      - 🇸🇬 Singapore
      - 🇺🇸 America
      - 🇺🇳 Nations

  - name: 📺 China Media
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/media.png
    proxies:
      - 🇨🇳 China
      - 🔰 Pick

  - name: 🇨🇳 China
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/map/china.png
    proxies:
      - DIRECT
      - 🔰 Pick
      - ✅ Node
      - 🇨🇳 Chinese

  - name: 🐟 Final
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/final.png 
    proxies:
      - 🔰 Pick
      - ✅ Node
      - 🇨🇳 China
      - ⛔ AdBlock

  - name: ⛔ AdBlock
    type: select
    icon: https://raw.githubusercontent.com/aimetu/icons/main/other/adblock.png
    proxies:
      - REJECT
      - REJECT-DROP
      - PASS
      - 🇨🇳 China
      - 🔰 Pick
      - ✅ Node

#💡 远程分流规则集合（behavior 参数有三种可选项：domain / ipcidr / classical）
rule-providers:
  🚥 Direct:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Direct/Direct.yaml
    path: /rule/Direct.yaml
    interval: 86400

  🚥 Lan:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Lan/Lan.yaml
    path: /rule/Lan.yaml
    interval: 86400

  ⛔ Anti.ad:
    type: http
    behavior: domain
    url: https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-clash.yaml
    path: /rule/anti-ad.yaml
    interval: 86400

  ⛔ Privacy.ad:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Privacy/Privacy_Classical.yaml
    path: /rule/Privacy_Classical.yaml
    interval: 86400
    
  ⛔ Hijacking.ad:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Hijacking/Hijacking.yaml
    path: /rule/Hijacking.yaml
    interval: 86400
    
  ⛔ Lite.ad:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/AdvertisingLite/AdvertisingLite_Classical.yaml
    path: /rule/AdvertisingLite_Classical.yaml
    interval: 86400

  ⛔ HttpDNS.ad:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/BlockHttpDNS/BlockHttpDNS.yaml
    path: /rule/BlockHttpDNS.yaml
    interval: 86400

  ⛔ Stun.ad:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/STUN/STUN.yaml
    path: /rule/STUN.yaml
    interval: 86400

  🕸️ Speedtest:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Speedtest/Speedtest.yaml
    path: /rule/Speedtest.yaml
    interval: 86400
    
  🎵 TikTok:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/TikTok/TikTok.yaml
    path: /rule/TikTok.yaml
    interval: 86400
    
  ✉️ Telegram:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Telegram/Telegram.yaml
    path: /rule/Telegram.yaml
    interval: 86400

  🗣️ Discord:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Discord/Discord.yaml
    path: /rule/Discord.yaml
    interval: 86400
    
  🎶 Spotify:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Spotify/Spotify.yaml
    path: /rule/Spotify.yaml
    interval: 86400
    
  📽️ Netflix:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Netflix/Netflix.yaml
    path: /rule/Netflix.yaml
    interval: 86400
    
  📼 Disney+:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Disney/Disney.yaml
    path: /rule/Disney.yaml
    interval: 86400
    
  📹 YouTube:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube.yaml
    path: /rule/YouTube.yaml
    interval: 86400
    
  🤖 OpenAI:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OpenAI/OpenAI.yaml
    path: /rule/OpenAI.yaml
    interval: 86400

  🛒 Amazon:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Amazon/Amazon.yaml
    path: /rule/Amazon.yaml
    interval: 86400

  🎭 Facebook:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Facebook/Facebook.yaml
    path: /rule/Facebook.yaml
    interval: 86400

  📟 Google:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Google/Google.yaml
    path: /rule/Google.yaml
    interval: 86400
    
  🖥️ Microsoft:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Microsoft/Microsoft.yaml
    path: /rule/Microsoft.yaml
    interval: 86400
    
  🍎 Apple.OTA:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/SystemOTA/SystemOTA.yaml
    path: /rule/SystemOTA.yaml
    interval: 86400
    
  🍎 Apple:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Apple/Apple_Classical.yaml
    path: /rule/Apple_Classical.yaml
    interval: 86400

  🎬 Global Media:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GlobalMedia/GlobalMedia_Classical.yaml
    path: /rule/GlobalMedia_Classical.yaml
    interval: 86400
    
  🌐 Global:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Global/Global_Classical.yaml
    path: /rule/Global_Classical.yaml
    interval: 86400
    
  📺 China Media:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMedia/ChinaMedia.yaml
    path: /rule/ChinaMedia.yaml
    interval: 86400
    
  🇨🇳 China:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/China/China_Classical.yaml
    path: /rule/China_Classical.yaml
    interval: 86400
    
  🇨🇳 China.IPS:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaIPs/ChinaIPs_Classical.yaml
    path: /rule/ChinaIPs_Classical.yaml
    interval: 86400

  🇨🇳 China.BGP:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaIPsBGP/ChinaIPsBGP_Classical.yaml
    path: /rule/ChinaIPsBGP_Classical.yaml
    interval: 86400
    
#💡 引用子规则，匹配到规则时，将请求送往另一规则流程
sub-rules:
  local:
    - DOMAIN-KEYWORD,lan,🇨🇳 China
    - DOMAIN-SUFFIX,local,🇨🇳 China
    - IP-CIDR,17.0.0.0/8,🇨🇳 China
    - IP-CIDR,182.254.116.0/24,🇨🇳 China
    - IP-CIDR6,fe80::/10,🇨🇳 China
  adblock:
    - DOMAIN,qzs.qq.com,⛔ AdBlock
    - DOMAIN,ocsp.apple.com,⛔ AdBlock

#💡 规则匹配策略，包含代理和策略组，每一条规则都必须有一个策略，规则将按照从上到下的顺序匹配
# RULE-SET：引用规则集合
# SUB-RULE:引用子规则，匹配到规则时,将请求送往另一规则流程，如果在 sub-rule 内没匹配到，则会退回常规规则流程
# DOMAIN：域名规则，如果请求的域完全匹配，则会匹配上此规则
# DOMAIN-SUFFIX：域名后缀规则，如果请求的域名后缀匹配，则会匹配上此规则
# DOMAIN-KEYWORD：域名关键词规则，如果请求的域名中包含关键字，则会匹配上此规则
# DOMAIN-REGEX：匹配域名正则表达式
# PROCESS-NAME：进程规则，匹配进程名称（Android 平台可以匹配包名）
# PROCESS-PATH：进程路径规则，匹配完整进程路径
# IP-CIDR：ip 范围规则，请求 ipv4 匹配的指定范围 参考：https://www.ipaddressguide.com/
# IP-CIDR6：ip 范围规则，请求 ipv6 匹配的指定范围
# IP-SUFFIX：匹配 IP 后缀范围
# IP-ASN：匹配 IP 所属 ASN
# no-resolve：跳过域名去进行 dns 解析，当请求为域名匹配到 geoip 或 ip-cidr 规则时，clash 将请求 dns 查询来检查域名的 ip 是否匹配此条规则
# SRC-GEOIP：匹配来源 IP 所属国家代码
# SRC-IP-ASN：匹配来源 IP 所属 ASN
# SRC-IP-CIDR：来源 ipv4 的 ip 范围规则，匹配请求的客户端 ip 地址范围
# SRC-IP-SUFFIX：匹配来源 IP 后缀范围
# DST-PORT：从目标端口规则，匹配请求的目标端口
# SRC-PORT：从来源端口规则，匹配请求来源的端口
# AND：逻辑规则，规则内的条件都必须满足
# OR：逻辑规则，规则内的条件只需满足一项即可
# NOT：逻辑规则，必须为规则内不包含的条件
# IN-TYPE：匹配流量入站的类型，支持的类型（HTTP/SOCKS/TUN/TPROXY/REDIR/INNER）
# IN-USER：匹配入站用户名,目前仅 vmess 入站支持配置用户名
# IN-NAME：匹配入站名称
# IN-PORT：匹配入站端口
# NETWORK：匹配入站流量的类型，匹配入站流量的类型 tcp / udp
# UID：匹配 Linux USER ID
# DSCP：匹配DSCP标记 (仅限 tproxy udp 入站)
# GEOIP：根据 geoip 地址国家/地区，匹配集合内相应的 ip 范围
# GEOSITE：域名集合，匹配集合内的域名 参考：https://github.com/v2fly/domain-list-community/tree/master/data
# MATCH：兜底规则，不在规则中的请求（规则必须写在其他规则之后，它会直接匹配所有的请求）
rules:
  - DOMAIN,openwrt.lan,🇨🇳 China
  - DOMAIN-SUFFIX,local,🇨🇳 China
  - DOMAIN-KEYWORD,localhost,🇨🇳 China
  - DOMAIN-REGEX,^https?:\/\/(www|m)\.google\.cn,📟 Google
  - PROCESS-NAME,Notion.exe,🌐 Global
  - PROCESS-NAME,OneDriveUpdater.exe,🌐 Global
  - PROCESS-PATH,C:\Program Files\Microsoft OneDrive\OneDrive.exe,🌐 Global
  - IP-CIDR,10.0.0.0/8,🇨🇳 China,no-resolve　　　　　　
  - IP-CIDR,100.64.0.0/10,🇨🇳 China,no-resolve
  - IP-CIDR,127.0.0.0/8,🇨🇳 China,no-resolve
  - IP-CIDR,172.16.0.0/12,🇨🇳 China,no-resolve
  - IP-CIDR,192.168.0.0/16,🇨🇳 China,no-resolve
  - IP-CIDR,224.0.0.0/24,🇨🇳 China,no-resolve
  - IP-CIDR,169.254.0.0/16,🇨🇳 China,no-resolve
  - IP-CIDR,183.240.197.130/32,🇨🇳 China,no-resolve
  - IP-CIDR6,2620:0:2d0::/48,🇨🇳 China,no-resolve
  - IP-SUFFIX,114.114.112.0/21,🇨🇳 China,no-resolve
  - IP-ASN,13335,🌐 Global,no-resolve
  - SRC-GEOIP,cn,🇨🇳 China
  - SRC-IP-ASN,133877,🌐 Global,no-resolve
  - SRC-IP-CIDR,239.255.255.250/32,🇨🇳 China,no-resolve
  - SRC-IP-SUFFIX,192.168.1.0/8,🇨🇳 China,no-resolve
  - DST-PORT,1400,✉️ Telegram
  #- DST-PORT,114/514,🇨🇳 China # 示例：匹配 114 和 514 端口
  #- DST-PORT,114-514,🇨🇳 China # 示例：匹配 114 到 514 端口
  #- DST-PORT,114/233/514-1919,🇨🇳 China # 示例：匹配 114 和 233 以及 514 到 1919
  #- SRC-PORT,7777,🇨🇳 China
  #- IN-NAME,name,🌐 Global
  #- IN-USER,vmess,🌐 Global
  #- IN-TYPE,SOCKS,🌐 Global
  #- IN-PORT,7890,🇨🇳 China
  #- NETWORK,tcp,🇨🇳 China
  #- UID,1001,🇨🇳 China
  #- DSCP,4,🌐 Global
  - AND,((DOMAIN-SUFFIX,bilibili.com),(NETWORK,UDP),(DST-PORT,4483)),⛔ AdBlock # 示例：匹配域名，且网络类型为 udp 指定 443 端口的请求
  - AND,((DOMAIN-SUFFIX,bilibili.com),(NETWORK,UDP),(DST-PORT,9305)),⛔ AdBlock 
  - AND,((NETWORK,UDP),(DST-PORT,443)),⛔ AdBlock # 示例：匹配网络类型为 udp 指定端口的请求
  - AND,((NETWORK,UDP),(DST-PORT,3478)),⛔ AdBlock
  - AND,((NETWORK,UDP),(DST-PORT,19302)),⛔ AdBlock
  #- AND,((DST-PORT,22),(GEOIP,CN,no-resolve)),🇨🇳 China # ip 类规则可用 no-resolve, 需书写在括号内
  - OR,((DOMAIN-KEYWORD,PCDN),(DOMAIN-KEYWORD,STUN)),⛔ AdBlock # 示例：域名关键词为 pcdn 或 stun 的请求
  - OR,((DOMAIN-KEYWORD,HTTPDNS),(DOMAIN-KEYWORD,HTTPSDNS)),⛔ AdBlock
  #- NOT,((GEOIP,CN)),🌐 Global # 示例：cn 以外地区请求走 🌐 Global 节点/策略组
  #- NOT,((DOMAIN,baidu.com)),🌐 Global # 示例：baidu.com 以外域名的请求走 🌐 Global 节点/策略组
  - RULE-SET,🚥 Direct,🇨🇳 China
  - RULE-SET,🚥 Lan,🇨🇳 China
  - RULE-SET,⛔ Anti.ad,⛔ AdBlock
  - RULE-SET,⛔ Privacy.ad,⛔ AdBlock
  - RULE-SET,⛔ Hijacking.ad,⛔ AdBlock
  - RULE-SET,⛔ Lite.ad,⛔ AdBlock
  - RULE-SET,⛔ HttpDNS.ad,⛔ AdBlock
  - RULE-SET,⛔ Stun.ad,⛔ AdBlock
  - RULE-SET,🕸️ Speedtest,🕸️ Speedtest
  - RULE-SET,🎵 TikTok,🎵 TikTok
  - RULE-SET,✉️ Telegram,✉️ Telegram
  - RULE-SET,🗣️ Discord,🗣️ Discord
  - RULE-SET,🎶 Spotify,🎶 Spotify
  - RULE-SET,📽️ Netflix,📽️ Netflix
  - RULE-SET,📼 Disney+,📼 Disney+
  - RULE-SET,📹 YouTube,📹 YouTube
  - RULE-SET,🤖 OpenAI,🤖 OpenAI
  - RULE-SET,🛒 Amazon,🛒 Amazon
  - RULE-SET,🎭 Facebook,🎭 Facebook
  - RULE-SET,📟 Google,📟 Google
  - RULE-SET,🖥️ Microsoft,🖥️ Microsoft
  - RULE-SET,🍎 Apple.OTA,⛔ AdBlock
  - RULE-SET,🍎 Apple,🍎 Apple
  - RULE-SET,🎬 Global Media,🎬 Global Media
  - RULE-SET,🌐 Global,🌐 Global
  - RULE-SET,📺 China Media,📺 China Media
  - RULE-SET,🇨🇳 China,🇨🇳 China
  - RULE-SET,🇨🇳 China.IPS,🇨🇳 China
  - RULE-SET,🇨🇳 China.BGP,🇨🇳 China
  - SUB-RULE,(NETWORK,TCP),local # 示例：括号内可以使用任意规则
  - SUB-RULE,(NETWORK,UDP),adblock # 示例：括号内可以使用任意规则
  - GEOIP,CN,🇨🇳 China
  - GEOSITE,cn,🇨🇳 China
  - MATCH,🐟 Final
