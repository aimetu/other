// https://github.com/Thaolga/openwrt-nekobox/blob/main/luci-app-nekobox/root/etc/neko/config/Puernya.json
// https://sing-box.sagernet.org
{
    "log": {
        "disabled": false, // 禁用日志，启动后不输出日志
        "level": "info", // 日志等级，可选值：trace debug info warn error fatal panic
        "output": "box.log", // 输出文件路径，启动后将不输出到控制台
        "timestamp": true // 添加时间到每行
    },
	
    "experimental": {
        "cache_file": {
            "enabled": true,
            "store_fakeip": true,
            "store_rdrc": false
        },
        "clash_api": {
            "external_controller": "0.0.0.0:9090",
            "external_ui": "ui",
            "secret": "password",
            "external_ui_download_url": "https://github.com/MetaCubeX/Yacd-meta/archive/gh-pages.zip",
            "external_ui_download_detour": "🔰 Pick",
            "default_mode": "rule"
        }
    },
	
    "dns": {
        "servers": [
        {
            "tag": "direct-dns", // DNS 服务器的标签
            "address_resolver": "resolver-dns", // 用于解析本 DNS 服务器的域名的另一个 DNS 服务器的标签，如果服务器地址包括域名则必须
            "address_strategy": "prefer_ipv4", // 用于解析本 DNS 服务器的域名的策略, 可选项：prefer_ipv4 prefer_ipv6 ipv4_only ipv6_only
            "strategy": "prefer_ipv4", // 默认解析策略, 可选项：prefer_ipv4 prefer_ipv6 ipv4_only ipv6_only, 如果被其他设置覆盖则不生效
            // DNS 服务器的地址
            "address": [
                "https://doh.pub/dns-query",
                "https://dns.alidns.com/dns-query",
                "quic://dns.alidns.com"
            ],
                "detour": "🇨🇳 China" // 用于连接到 DNS 服务器的出站的标签, 如果为空，将使用默认出站
        },
        {
            "tag": "proxy-dns",
            "address_resolver": "resolver-dns",
            "address_strategy": "prefer_ipv4",
            "strategy": "prefer_ipv4",
            "address": [
                "https://dns.google/dns-query",
                "https://dns.opendns.com/dns-query",
                "https://cloudflare-dns.com/dns-query"
            ],
            "detour": "🔰 Pick"
        },
        {
            "tag": "resolver-dns", // 用于解析域名的 DNS 服务器
            "address": [
                "223.5.5.5",
                "119.29.29.29"
            ],
            "detour": "direct"
        },
        {
            "tag": "block-dns",
            "address": "rcode://success"  // RCode 传输层传输层常用于屏蔽请求, 可选项：refused success format_error server_failure name_error not_implemented
        },
        {
            "tag": "fakeip-dns",
            "address": "fakeip"
        }  
    ],
	"disable_cache": true,
	"disable_expire": true,
	"independent_cache": true,
    "rules": [
        {
            "outbound": "any",  // 任何出站连接 DNS 服务器解析
            "server": "direct-dns",
            "disable_cache": true
        },
        {
            "clash_mode": "direct", // 直连模式
            "server": "direct-dns"
        },
        {
            "clash_mode": "global", // 全局代理模式
            "server": "proxy-dns"
        },
        {
            "type": "logical",
			"mode": "and",
			"rules": [
			{
				"domain_suffix": [
				".lan",
				"*.lan",
				"*.local",
				"localhost",
				"WORKGROUP",
				"*.msftncsi.com",
				"*.msftconnecttest.com",
				"cable.auth.com",
				"captive.apple.com",
				"*.cmpassport.com",
				"id6.me",
				"open.e.189.cn",
				"auth.wosms.cn",
				"mdn.open.wo.cn",
				"opencloud.wostore.cn",
				"enrichgw.10010.com",
				"localhost.*.qq.com",
				"localhost.*.weixin.qq.com"
			],
			"invert": true
			},
			{
            "query_type": [
              "A",
              "AAAA"
            ]
            },
            "server": "fakeip-dns"
        }
    ],
	
    "fakeip": {
        "enabled": true,
        "inet4_range": "198.18.0.0/15",
        "inet6_range": "fc00::/18",
		"strategy": "prefer_ipv4"
        },
	"final": "proxy-dns"
    },
    
    "inbounds": [
        {
            "type": "http",
            "listen": "::",
            "listen_port": 1080,
            "sniff": true,
            "sniff_override_destination": false,
			"tcp_fast_open": false,
			"tcp_multi_path": false,
			"udp_fragment": false,
			"domain_strategy": "prefer_ipv4",
        },
        {
            "type": "socks",
            "listen": "::",
            "listen_port": 1081,
            "sniff": true,
            "sniff_override_destination": false,
			"tcp_fast_open": false,
			"tcp_multi_path": false,
			"udp_fragment": false,
			"domain_strategy": "prefer_ipv4",
        },
        {
            "type": "mixed",
            "listen": "0.0.0.0",
            "listen_port": 1082,
            "sniff": true,
            "sniff_override_destination": false,
			"tcp_fast_open": false,
			"tcp_multi_path": false,
			"udp_fragment": false,
			"domain_strategy": "prefer_ipv4",
        },		
        {
            "tag": "tun-in",
            "type": "tun",
			"stack": "mixed",
            "interface_name": "stun", //设置虚拟网卡名称，默认自动选择。
            "address": [
              "172.18.0.1/30",
              "fdfe:dcba:9876::1/126"
            ],
			"mtu": 9000,
			"udp_timeout": "5m",
			"iproute2_table_index": 2022, //生成的 iproute2 路由表索引
			"iproute2_rule_index": 9000, //生成的 iproute2 规则起始索引
            "auto_route": true, //设置到 Tun 的默认路由
			"auto_redirect": true, // 自动配置 iptables/nftables 以重定向连接, 需要 auto_route 已启用
			"auto_redirect_input_mark": "0x2023", //route_address_set 和 route_exclude_address_set 使用的连接输入标记
			"auto_redirect_output_mark": "0x2024", //route_address_set 和 route_exclude_address_set 使用的连接输出标记
            "strict_route": true, //启用 auto_route 时执行严格的路由规则, 它可以防止 IP 地址泄漏
			"endpoint_independent_nat": true, //启用通用分段卸载
			"platform": {
                "http_proxy": {
                    "enabled": true,
                    "server": "0.0.0.0",
                    "server_port": 1081
                }
            },
			"route_exclude_address": [
                "192.168.0.0/16",
                "fc00::/7"
            ],
			"route_address_set": [
                "geoip-cloudflare"
            ],
			"route_exclude_address_set": [
                "geoip-cn"
            ],
			"sniff": true,
			"sniff_override_destination": false,
			"domain_strategy": "prefer_ipv4"
        }
    ],
    
    "subscribes": [
        {
            "tag": "Subscribe ", // 自定义订阅标签
            "url": "https://example.com/xxx/xxx&flag=clash", // 订阅链接
            "enabled": true, // 启用此链接转换，false 订阅将被忽略
            "emoji": 1, // 增加 emoji 表情，false 或 0，节点名称将不包含国家/地区国旗 emoji
            "subgroup": "named",  // 为 subscription 链接命名并生成出站
            "User-Agent": "clash.meta", // 自定义 UA，例如将 UA 设置为 “clash.meta” 或 “sing-box”
            "prefix": "Sub~", // 添加到节点名称开头的自定义前缀。如果未设置，则不会添加前缀
            "ex-node-name": "(?i)订阅|流量|剩余|套餐|到期|过滤|重置|距离|过期|线路|官网|网站|网址|地址|备用|客服|群|邀请|返利|循环|已用|联系|邮箱", // 筛选包含关键字的节点
            "healthcheck_url": "https://www.gstatic.com/generate_204", // 节点检测链接
            "healthcheck_interval": "600m", // 每隔多少时间检测节点
            "download_interval": "48h" // 自动更新时间
        }
    ],

        // 设置此选项后，脚本将自动使路由规则适应 DNS 规则
        "auto_set_outbounds_dns":{
        "proxy": "proxy-dns",
        "direct": "direct-dns"
    },

    "save_config_path": "./config.json", // 设置生成的配置文件的路径
    "auto_backup": false,  // 备份当前使用的配置文件备份
    "exclude_protocol": "wireguard", // 设置要排除的协议
    //"config_template": "", //  配置模板链接，以从此模板生成 sing-box 配置
    //"Only-nodes": false // 设置为 true 或 1 时，仅输出订阅链接的 sing-box 格式的节点信息
    
    "outbounds": [
        {
            "tag": "🔰 Pick",
            "type": "selector",
            //"default": "♻️ Auto", // 默认的出站标签。默认使用第一个出站
            "outbounds": [
                "♻️ Auto",
                "✅ Node",
                "🇭🇰 HongKong",
                "🇹🇼 Taiwan",
                "🇯🇵 Japan",
                "🇰🇷 Korea",
                "🇸🇬 Singapore",
                "🇺🇸 America",
                "🇺🇳 Nations",
                "DIRECT",
                "REJECT"
            ]
        },
        {
            "tag": "♻️ Auto",
            "type": "urltest",
            "url": "https://www.gstatic.com/generate_204",
            "interval": "3m", // 测试间隔。 默认使用 3m
            "tolerance": 150, // 以毫秒为单位的测试容差。 默认使用 50
            "idle_timeout": "30m", // 空闲超时。默认使用 30m
            "interrupt_exist_connections": true, // 当选定的出站发生更改时，中断现有连接
            "outbounds": "subscribes"
            "excludes": [
                "订阅|流量|剩余|套餐|到期|过滤|重置|距离|过期|线路|官网|网站|网址|地址|备用|客服|群|邀请|返利|循环|已用|联系|邮箱"
            ]            
        },
        {
            "tag": "✅ Node",
            "type": "selector",
            "outbounds": "subscribes"
        },        
        {
            "tag": "🇭🇰 HongKong",
            "type": "selector",
            "url": "https://www.gstatic.com/generate_204",
            "interval": "3m",
            "tolerance": 150,
            "idle_timeout": "30m",
            "interrupt_exist_connections": true,
            "outbounds": "subscribes",
            "include": [
                "🇭🇰|港|香港|hk|HK|Hong|HongKong"
            ]
        },
        {
            "tag": "🇹🇼 Taiwan",
            "type": "selector",
            "url": "https://www.gstatic.com/generate_204",
            "interval": "3m",
            "tolerance": 150,
            "idle_timeout": "30m",
            "interrupt_exist_connections": true,
            "outbounds": "subscribes",
            "include": [
                "🇹🇼|台|台湾|台北|臺灣|tw|TW|Tai|Taiwan"
            ]
        },
        {
            "tag": "🇯🇵 Japan",
            "type": "selector",
            "url": "https://www.gstatic.com/generate_204",
            "interval": "3m",
            "tolerance": 150,
            "idle_timeout": "30m",
            "interrupt_exist_connections": true,
            "outbounds": "subscribes",
            "include": [
                "🇯🇵|日|日本|川日|东京|大阪|泉日|埼玉|沪日|深日|jp|JP|Japan"
            ]
        },
        {
            "tag": "🇰🇷 Korea",
            "type": "selector",
            "url": "https://www.gstatic.com/generate_204",
            "interval": "3m",
            "tolerance": 150,
            "idle_timeout": "30m",
            "interrupt_exist_connections": true,
            "outbounds": "subscribes",
            "include": [
                "🇰🇷|韩|韓|韩国|韓國|首尔|朝鲜|kr|KR|KOR|Korea|South Korea|SouthKorea"
            ]
        },
        {
            "tag": "🇸🇬 Singapore",
            "type": "selector",
            "url": "https://www.gstatic.com/generate_204",
            "interval": "3m",
            "tolerance": 150,
            "idle_timeout": "30m",
            "interrupt_exist_connections": true,
            "outbounds": "subscribes",
            "include": [
                "🇸🇬|新|狮|新加坡|狮城|sg|SG|Singapore"
            ]
        },
        {
            "tag": "🇺🇸 America",
            "type": "selector",
            "url": "https://www.gstatic.com/generate_204",
            "interval": "3m",
            "tolerance": 150,
            "idle_timeout": "30m",
            "interrupt_exist_connections": true,
            "outbounds": "subscribes",
            "include": [
                "🇺🇸|美|美国|美國|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|us|US|United States|UnitedStates|America"
            ]
        },
        {
            "tag": "🇺🇳 Nations",
            "type": "selector",
            "url": "https://www.gstatic.com/generate_204",
            "interval": "3m",
            "tolerance": 150,
            "idle_timeout": "30m",
            "interrupt_exist_connections": true,
            "outbounds": "subscribes",
            "excludes": [
                "^((?!🇨🇳|中国|大陆|国内|回国|cn|CN|CHINA|电信|移动|联通|腾讯|阿里|教育|校园|直连|🇭🇰|港|香港|hk|HK|Hong|HongKong|🇹🇼|台|台湾|台北|臺灣|tw|TW|Tai|Taiwan|🇯🇵|日|日本|川日|东京|大阪|泉日|埼玉|沪日|深日|jp|JP|Japan|🇰🇷|韩|韓|韩国|韓國|首尔|朝鲜|kr|KR|KOR|Korea|South Korea|SouthKorea|🇸🇬|新|狮|新加坡|狮城|sg|SG|Singapore|🇺🇸|美|美国|美國|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|us|US|United States|UnitedStates|America).)*$"
            ]
        },
        {
            "tag": "🕸️ Speedtest",
            "type": "selector",
            "outbounds": [
                "🇨🇳 China",
                "🔰 Pick"
            ]
        },
        {
            "tag": "🎵 TikTok",
            "type": "selector",
            "outbounds": [
                "🔰 Pick",
                "✅ Node",
                "🇭🇰 HongKong",
                "🇹🇼 Taiwan",
                "🇯🇵 Japan",
                "🇰🇷 Korea",
                "🇸🇬 Singapore",
                "🇺🇸 America",
                "🇺🇳 Nations"
            ]
        },    
        {
            "tag": "✉️ Telegram",
            "type": "selector",
            "outbounds": [
                "🔰 Pick",
                "✅ Node",
                "🇭🇰 HongKong",
                "🇹🇼 Taiwan",
                "🇯🇵 Japan",
                "🇰🇷 Korea",
                "🇸🇬 Singapore",
                "🇺🇸 America",
                "🇺🇳 Nations"
            ]
        },
        {
            "tag": "🎶 Spotify",
            "type": "selector",
            "outbounds": [
                "🔰 Pick",
                "✅ Node",
                "🇭🇰 HongKong",
                "🇹🇼 Taiwan",
                "🇯🇵 Japan",
                "🇰🇷 Korea",
                "🇸🇬 Singapore",
                "🇺🇸 America",
                "🇺🇳 Nations"
            ]
        },        
        {
            "tag": "🎥 Netflix",
            "type": "selector",
            "outbounds": [
                "🔰 Pick",
                "✅ Node",
                "🇭🇰 HongKong",
                "🇹🇼 Taiwan",
                "🇯🇵 Japan",
                "🇰🇷 Korea",
                "🇸🇬 Singapore",
                "🇺🇸 America",
                "🇺🇳 Nations"
            ]
        },        
        {
            "tag": "📼 Disney+",
            "type": "selector",
            "outbounds": [
                "🔰 Pick",
                "✅ Node",
                "🇭🇰 HongKong",
                "🇹🇼 Taiwan",
                "🇯🇵 Japan",
                "🇰🇷 Korea",
                "🇸🇬 Singapore",
                "🇺🇸 America",
                "🇺🇳 Nations"
            ]
        },
        {
            "tag": "📹 YouTube",
            "type": "selector",
            "outbounds": [
                "🔰 Pick",
                "✅ Node",
                "🇭🇰 HongKong",
                "🇹🇼 Taiwan",
                "🇯🇵 Japan",
                "🇰🇷 Korea",
                "🇸🇬 Singapore",
                "🇺🇸 America",
                "🇺🇳 Nations"
            ]
        },     
        {
            "tag": "🤖 OpenAI",
            "type": "selector",
            "outbounds": [
                "🔰 Pick",
                "✅ Node",
                "🇭🇰 HongKong",
                "🇹🇼 Taiwan",
                "🇯🇵 Japan",
                "🇰🇷 Korea",
                "🇸🇬 Singapore",
                "🇺🇸 America",
                "🇺🇳 Nations"
            ]
        },        
        {
            "tag": "🛒 Amazon",
            "type": "selector",
            "outbounds": [
                "🔰 Pick",
                "✅ Node",
                "🇭🇰 HongKong",
                "🇹🇼 Taiwan",
                "🇯🇵 Japan",
                "🇰🇷 Korea",
                "🇸🇬 Singapore",
                "🇺🇸 America",
                "🇺🇳 Nations"
            ]
        },
        {
            "tag": "📟 Google",
            "type": "selector",
            "outbounds": [
                "🔰 Pick",
                "✅ Node",
                "🇭🇰 HongKong",
                "🇹🇼 Taiwan",
                "🇯🇵 Japan",
                "🇰🇷 Korea",
                "🇸🇬 Singapore",
                "🇺🇸 America",
                "🇺🇳 Nations"
            ]
        },        
        {
            "tag": "🎭 Facebook",
            "type": "selector",
            "outbounds": [
                "🔰 Pick",
                "✅ Node",
                "🇭🇰 HongKong",
                "🇹🇼 Taiwan",
                "🇯🇵 Japan",
                "🇰🇷 Korea",
                "🇸🇬 Singapore",
                "🇺🇸 America",
                "🇺🇳 Nations"
            ]
        },
        {
            "tag": "🖥️ Microsoft",
            "type": "selector",
            "outbounds": [
                "🇨🇳 China",
                "🔰 Pick",
                "✅ Node",
                "🇭🇰 HongKong",
                "🇹🇼 Taiwan",
                "🇯🇵 Japan",
                "🇰🇷 Korea",
                "🇸🇬 Singapore",
                "🇺🇸 America",
                "🇺🇳 Nations"
            ]
        },        
        {
            "tag": "🍎 Apple",
            "type": "selector",
            "outbounds": [
                "🇨🇳 China",
                "🔰 Pick",
                "✅ Node",
                "🇭🇰 HongKong",
                "🇹🇼 Taiwan",
                "🇯🇵 Japan",
                "🇰🇷 Korea",
                "🇸🇬 Singapore",
                "🇺🇸 America",
                "🇺🇳 Nations"
            ]
        },        
        {
            "tag": "🎬 Global Media",
            "type": "selector",
            "outbounds": [
                "🌐 Global",
                "🔰 Pick"
            ]
        },        
        {
            "tag": "🌐 Global",
            "type": "selector",
            "outbounds": [
                "🔰 Pick",
                "✅ Node",
                "🇭🇰 HongKong",
                "🇹🇼 Taiwan",
                "🇯🇵 Japan",
                "🇰🇷 Korea",
                "🇸🇬 Singapore",
                "🇺🇸 America",
                "🇺🇳 Nations"
            ]
        },
        {
            "tag": "🇨🇳 China",
            "type": "selector",
            "outbounds": [
                "DIRECT"
                "🔰 Pick",
                "✅ Node"
            ]
        },
        {
            "tag": "🐟 Final",
            "type": "selector",
            "outbounds": [
                "🔰 Pick",
                "✅ Node",
                "🇨🇳 China",
                "⛔ AdBlock"
            ]
        },
        {
            "tag": "⛔ AdBlock",
            "type": "selector",
            "outbounds": [
                "REJECT"
                "🔰 Pick",
                "✅ Node",
                "🇨🇳 China",
            ]
        },
        {
            "tag": "dns-out",
            "type": "dns"
        }     
    ],
    
    "route": {
        "rule_set": [
            {
                "tag": "⛔ geosite-adblock",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo/geosite/adblock.srs"
                "path": "./rules/adblock.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },
            {
                "tag": "🕸️ geosite-networktest",
                "type": "remote",
                "format": "binary",
                "url": "https://github.com/DustinWin/ruleset_geodata/releases/download/sing-box-ruleset/networktest.srs",
                "path": "./rules/networktest.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },            
            {
                "tag": "🎵 geosite-tiktok",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo-lite/geosite/tiktok.srs",
                "path": "./rules/geosite/tiktok.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },
            {
                "tag": "✉️ geosite-telegram",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo-lite/geosite/telegram.srs",
                "path": "./rules/telegramip.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },
            {
                "tag": "🎶 geosite-spotify",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo-lite/geosite/spotify.srs",
                "path": "./rules/spotify.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },
            {
                "tag": "📽️ geoip-netflix",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo/geoip/netflix.srs",
                "path": "./rules/netflix.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },
            {
                "tag": "📼 geosite-disney",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo/geosite/disney.srs",
                "path": "./rules/disney.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },
            {
                "tag": "📹 geosite-youtube",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo-lite/geosite/youtube.srs",
                "path": "./rules/youtube.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },
            {
                "tag": "🤖 geosite-openai",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo-lite/geosite/openai.srs",
                "path": "./rules/openai.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },   
            {
                "tag": "🛒 geosite-amazon",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo/geosite/amazon.srs",
                "path": "./rules/amazon.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },
            {
                "tag": "🎭 geoip-facebook",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo/geoip/facebook.srs",
                "path": "./rules/facebook.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },
            {
                "tag": "📟 geosite-google",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo-lite/geosite/google.srs",
                "path": "./rules/google.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },
            {
                "tag": "🖥️ geosite-microsoft",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo-lite/geosite/microsoft.srs",
                "path": "./rules/microsoft.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },
            {
                "tag": "🍎 geosite-apple",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo-lite/geosite/apple.srs",
                "path": "./rules/apple.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },
            {
                "tag": "🌐 geosite-proxy",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo-lite/geosite/proxy.srs",
                "path": "./rules/proxy.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },
            {
                "tag": "🌐 geosite-proxymedia",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo-lite/geosite/proxymedia.srs",
                "path": "./rules/proxymedia.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },          
            {
                "tag": "🇨🇳 geosite-cn",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo/geosite/cn.srs",
                "path": "./rules/geosite-cn.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },
            {
                "tag": "🇨🇳 geoip-cn",
                "type": "remote",
                "format": "binary",
                "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo/geoip/cn.srs",
                "path": "./rules/geoip-cn.srs",
                "update_interval": "86400",
                "download_detour": "🔰 Pick"
            },
        ],
        
        "rules": [
            {
                "network": "udp",
				"port": 443,
                "outbound": "⛔ AdBlock"
            },
            {
                "clash_mode": "Direct",
                "outbound": "🇨🇳 China"
            },
            {
                "clash_mode": "Global",
                "outbound": "🌐 Global"
            },
            {
                "rule_set": "⛔ geosite-adblock",
                "outbound": "⛔ AdBlock"
            },			
            {
                "rule_set": "🕸️ geosite-networktest",
                "outbound": "🕸️ Speedtest"
            },
            {
                "rule_set": "🎵 geosite-tiktok",
                "outbound": "🎵 TikTok"
            },
            {
                "rule_set": "✉️ geosite-telegram"
                "outbound": "✉️ Telegram",
            },
            {
                "rule_set": "🎶 geosite-spotify",
                "outbound": "🎶 Spotify"
            },
            {
                "rule_set": "📽️ geoip-netflix",
                "outbound": "🎥 Netflix"
            },
            {
                "rule_set": "📼 geosite-disney",
                "outbound": "📼 Disney+"
            },
            {
                "rule_set": "📹 geosite-youtube",
                "outbound": "📹 YouTube"
            },
            {
                "rule_set": "🤖 geosite-openai",
                "outbound": "🤖 OpenAI"
            },
            {
                "rule_set": "🛒 geosite-amazon",
                "outbound": "🛒 Amazon"
            },
            {
                "rule_set": "🎭 geoip-facebook",
                "outbound": "🎭 Facebook"
            },              
            {
                "rule_set": "📟 geosite-google",
                "outbound": "📟 Google"
            },            
            {
                "rule_set": "🖥️ geosite-microsoft",
                "outbound": "🖥️ Microsoft"
            },
            {
                "rule_set": "🍎 geosite-apple",
                "outbound": "🍎 Apple"
            },
            {
                "rule_set": "🌐 geosite-proxymedia",
                "outbound": "🎬 Global Media"
            },            
            {
                "rule_set": "🌐 geosite-proxy",
                "outbound": "🌐 Global"
            },
            {
                "rule_set": [
                    "🇨🇳 geosite-cn",
                    "🇨🇳 geoip-cn"
                ],
                "outbound": "🇨🇳 China"
            }
        ],
        
        "final": "🐟 Final",
        "auto_detect_interface": true
    }
}
